/*
 * Copyright (c) 20014-15 Arizona State University
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met: redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer;
 * redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution;
 * neither the name of the copyright holders nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Srinivas Tanikella
 *
 *	    Compiler and Microarchitecture Lab, ASU
 * 	    http://aviral.lab.asu.edu
 */

#include "base/vulnerability/vul_rob.hh"

RobVulCalc::RobVulCalc(int entries, int threads)
{
    numEntries = entries;
    numThreads = threads;

    histories = new History*[numThreads];
    for(int i = 0; i < numThreads; i++) {
        histories[i] = new History[numEntries];
        for(int j = 0; j < numEntries; j++) {
            histories[i][j].incomingTick = -1;
            histories[i][j].seqNum = -1;
        }
    }
}

RobVulCalc::~RobVulCalc()
{
    for(int i = 0; i < numThreads; i++)
        delete [] histories[i];

    delete [] histories;
}

void
RobVulCalc::vulOnInsert(int idx, int tid, int seqNum)
{
    histories[tid][idx].incomingTick = curTick();
    histories[tid][idx].seqNum = seqNum;
}

long
RobVulCalc::vulOnCommit(int tid, int seqNum)
{
    long vul = 0;
    for(int i = 0; i < numEntries; i++) {
        if(histories[tid][i].seqNum == seqNum && histories[tid][i].incomingTick != -1) {
            vul += curTick() - histories[tid][i].incomingTick;
        }
    }
    return (vul/TICKS_PER_CYCLE)*ROB_ENTRY_SIZE;
}

void
RobVulCalc::vulOnSquash(int tid, int seqNum)
{
    for(int i = 0; i < numEntries; i++) {
        if(histories[tid][i].seqNum == seqNum) {
            histories[tid][i].incomingTick = -1;
            histories[tid][i].seqNum = -1;
            break;
        }
    }
}
