/*
 * Copyright (c) 20014-15 Arizona State University
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met: redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer;
 * redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution;
 * neither the name of the copyright holders nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Srinivas Tanikella
 *
 *	    Compiler and Microarchitecture Lab, ASU
 * 	    http://aviral.lab.asu.edu
 */

#include "base/vulnerability/vul_inst_queue.hh"

InstQueueVulCalc::InstQueueVulCalc(int threads, int entries)
    : maxThreads(threads),
      maxEntries(entries)
{
    idx = 0;
    /*
    histories = new History*[maxThreads];
    for(int i = 0; i < maxThreads; i++) {
        histories[i] = new History[maxEntries];
        for(int j = 0; j < maxEntries; j++)
            histories[i][j].incomingTick = -1;
    }
    */
}

InstQueueVulCalc::~InstQueueVulCalc()
{
    /*
    for(int i = 0; i < maxThreads; i++)
        delete [] histories[i];

    delete [] histories;
    */
}

void
InstQueueVulCalc::vulOnInsert(int tid, int seqNum)
{
    assert(tid < maxThreads);
/*    
    if(idx >= maxEntries || histories[tid][idx].incomingTick != -1) {
        for(unsigned i = 0; i < maxEntries; ++i) {
            if(histories[tid][i].incomingTick == -1) {
                idx = i;
                break;
            }
        }
    }
*/  
//    assert(idx < maxEntries);
    

    History h;
    h.incomingTick = curTick();
    h.seqNum = seqNum;

    if(histories.size() <= tid)
    {
        std::list<History> lh (1, h);
        histories.push_back(lh); 
    } else {
        histories[tid].push_back(h);
    }
/*
    histories[tid][idx].seqNum = seqNum;
    histories[tid][idx].incomingTick = curTick();
    idx++;
*/
    return;
}

void 
InstQueueVulCalc::vulOnIssue(int tid, int seqNum)
{

    assert(tid < maxThreads);
/*
    for(unsigned i = 0; i < maxEntries; ++i) {
        if(histories[tid][i].incomingTick != -1
                && histories[tid][i].seqNum == seqNum) {
            histories[tid][i].t = curTick();
            break;
        }
    }
*/  
    std::list<History>::iterator it = histories[tid].begin();
    while(it != histories[tid].end()) {
        if(it->incomingTick != -1 &&
                it->seqNum == seqNum) {
            it->t = curTick();
            return;
        }
        ++it;
    }

    panic("[Issue] Instruction with seq num %d not found in IQ history table", seqNum);
}

long
InstQueueVulCalc::vulOnCommit(int tid, int finalSeqNum)
{
    long vul = 0;

    assert(tid < maxThreads);
/* 
    for(unsigned i = 0; i < maxEntries; ++i) {

        if(histories[tid][i].incomingTick != -1
                && histories[tid][i].seqNum == seqNum) {
            vul += histories[tid][i].t - histories[tid][i].incomingTick;
            histories[tid].erase(histories[tid].begin() + i);
            return vul*IQ_ENTRY_SIZE;
        }
    }
*/
    std::list<History>::iterator it = histories[tid].begin();
    while(it != histories[tid].end()) {
        if(it->incomingTick != -1
                && it->seqNum <= finalSeqNum) {
            vul += it->t - it->incomingTick;
            it = histories[tid].erase(it);
        } else
            ++it;
    }

    return (vul/TICKS_PER_CYCLE)*IQ_ENTRY_SIZE;
}

void
InstQueueVulCalc::vulOnSquash(int tid, int finalSeqNum)
{
    assert(tid < maxThreads);

    std::list<History>::iterator it = histories[tid].begin();
    while(it != histories[tid].end()) {
        if(it->seqNum > finalSeqNum
                && it->incomingTick != -1) {
            it = histories[tid].erase(it);
        } else
            ++it;
    }
}
