/*
 * Copyright (c) 20014-15 Arizona State University
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met: redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer;
 * redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution;
 * neither the name of the copyright holders nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: 
 *
 *	    Compiler and Microarchitecture Lab, ASU
 * 	    http://aviral.lab.asu.edu
 */

/* 
 * File:   PipelineRegisterVulnerability.hh
 * Author: onsoku
 *
 * Created on November 17, 2012, 9:58 AM
 */

#ifndef PIPELINEREGISTERVULNERABILITY_HH
#define	PIPELINEREGISTERVULNERABILITY_HH

#include <new>
#include <iostream>
#include <fstream>
#include <iomanip>
#include "base/statistics.hh"
#include "base/vulnerability/vulnerabilityParams.hh"
#include "base/vulnerability/vulnerability_tracker.hh"
#include "debug/vulRTL.hh"
#include "cpu/base.hh"

using namespace std;

using namespace vulContext;

template <class Impl>
class vulnerabilityContainer
{
public:
     //Vulnerability totals per component (structure)
    vulnerableComponents vulComp;
private:
    /* statistic for total vulnerability of the component */
    Stats::Scalar TotalPRVulnerability;
    /* statistic for total instructions not included in pr tables*/
    Stats::Scalar prUnknownInstructions;
    /* declare other statistics here */
    /** Total Vulnerability bits per Stage.*/
    Stats::Scalar prFetch_TotalVulbits;
    Stats::Scalar prDecode_TotalVulbits;
    Stats::Scalar prRename_TotalVulbits;
    Stats::Scalar prIEW_TotalVulbits;
    Stats::Scalar prCommit_TotalVulbits;

    /** Vulnerability bits per stage per type*/
    Stats::Scalar prFetch_InstVulbits;
    Stats::Scalar prFetch_CtrlVulbits;
    Stats::Scalar prFetch_DataVulbits;
    Stats::Scalar prDecode_InstVulbits;
    Stats::Scalar prDecode_CtrlVulbits;
    Stats::Scalar prDecode_DataVulbits;
    Stats::Scalar prRename_InstVulbits;
    Stats::Scalar prRename_CtrlVulbits;
    Stats::Scalar prRename_DataVulbits;
    Stats::Scalar prIEW_InstVulbits;
    Stats::Scalar prIEW_CtrlVulbits;
    Stats::Scalar prIEW_DataVulbits;
    Stats::Scalar prCommit_InstVulbits;
    Stats::Scalar prCommit_CtrlVulbits;
    Stats::Scalar prCommit_DataVulbits;
    /*Declarations*/
    typedef typename Impl::DynInstPtr DynInstPtr;
   
    BaseCPU *cpu; 
    
    /*Vulnerability Components*/
    class pipelineRegisterVulnerability:public VulnerabilityTracker
    {
            
     public: 
            //Variable type of vulnerability bits per stage.
            unsigned int v[3];
            /* Any specialization to constructor */    
            pipelineRegisterVulnerability(Tick est, bool stv, 
                    unsigned int vtm, unsigned int module) 
            : VulnerabilityTracker(est, stv, vtm, module)
            {
               
            }  
          /* Any specialization to registerAccess */ 
          bool readPR(DynInstPtr instruction, uint32_t Stage, uint32_t type)
          {
              bool known;
              uint64_t seqNum = instruction->seqNum;
              if ((Stage == STAGE_MEM)||(Stage==STAGE_EXECUTE))
              {
                unsigned int vaux[3];
                bool knownA=setVulnerabilityBits(vaux,instruction, STAGE_MEM);
                bool knownB=setVulnerabilityBits(v,instruction, STAGE_EXECUTE);
                known = ~(knownA && knownB);
                v[0]=v[0]+vaux[0];
                v[1]=v[1]+vaux[1];
                v[2]=v[2]+vaux[2];
              }
              else
              {
                known=setVulnerabilityBits(v,instruction, Stage);
              }
              unsigned int nbits = type == Inst? v[0]:
                                   type == Ctrl? v[1]:
                                                 v[2];
              //instruction was recognized.
              if (known)
              {
                 VulnerabilityTracker::registerAccess(seqNum, 
                                        AccessTracker::READ, nbits, curTick());
                 return true;
               }
              else
              {
                  //unknown instruction
                  return false;
              }
              return false;
          }
          bool writePR(DynInstPtr instruction, uint32_t Stage, uint32_t type)
          {
              bool known;
              uint64_t seqNum = instruction->seqNum;
              
              if ((Stage == STAGE_MEM)||(Stage==STAGE_EXECUTE))
              {
                unsigned int vaux[3];
                bool knownA=setVulnerabilityBits(vaux,instruction, STAGE_MEM);
                bool knownB=setVulnerabilityBits(v,instruction, STAGE_EXECUTE);
                known = ~(knownA && knownB);
                v[0]=v[0]+vaux[0];
                v[1]=v[1]+vaux[1];
                v[2]=v[2]+vaux[2];
              }
              else
              {
                known=setVulnerabilityBits(v,instruction, Stage);
              }
              unsigned int nbits = type == Inst? v[0]:
                                   type == Ctrl? v[1]:
                                                 v[2];
              //instruction was recognized.
              if (known)
              {
                 VulnerabilityTracker::registerAccess(seqNum, 
                                        AccessTracker::WRITE, nbits, curTick());
                 return true;
              }
              else
              {
                  //unknown instruction.
                  return false;
              }
              return false;
          }
          
          /* Any specialization to removeAccess */ 
          void RemoveAccess(uint64_t seqNum, bool Commited_Squashed)
          {
              if (Commited_Squashed)
              {
                 
                VulnerabilityTracker::removeAccess(seqNum, DynamicCommit);
              }
              else
              {
                VulnerabilityTracker::removeAccess(seqNum, DynamicRemove);
              }
          }
          /* Any extra functions */
        
        /*Vulnerability_output*/
        unsigned int
        setVulnerabilityBits (unsigned int *v, 
                DynInstPtr instruction, uint8_t Stage)
        {     
            if (Stage == STAGE_FETCH)
            {
                if  (!instruction->staticInst->getName().compare(0,3,"adc"))
                {
                    v[0]= ADC_FETCH_INSTRUCTION;
                    v[1]= ADC_FETCH_CONTROL;
                    v[2]= ADC_FETCH_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"add"))
                {
                    v[0]= ADD_FETCH_INSTRUCTION;
                    v[1]= ADD_FETCH_CONTROL;
                    v[2]= ADD_FETCH_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"and"))
                {
                    v[0]= AND_FETCH_INSTRUCTION;
                    v[1]= AND_FETCH_CONTROL;
                    v[2]= AND_FETCH_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"b"))
                {
                    v[0]= B_FETCH_INSTRUCTION;
                    v[1]= B_FETCH_CONTROL;
                    v[2]= B_FETCH_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"bic"))
                {
                    v[0]= BIC_FETCH_INSTRUCTION;
                    v[1]= BIC_FETCH_CONTROL;
                    v[2]= BIC_FETCH_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"bl"))
                {
                    v[0]= BL_FETCH_INSTRUCTION;
                    v[1]= BL_FETCH_CONTROL;
                    v[2]= BL_FETCH_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"cmn"))
                {
                    v[0]= CMN_FETCH_INSTRUCTION;
                    v[1]= CMN_FETCH_CONTROL;
                    v[2]= CMN_FETCH_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"cmp"))
                {
                    v[0]= CMP_FETCH_INSTRUCTION;
                    v[1]= CMP_FETCH_CONTROL;
                    v[2]= CMP_FETCH_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"eor"))
                {
                    v[0]= EOR_FETCH_INSTRUCTION;
                    v[1]= EOR_FETCH_CONTROL;
                    v[2]= EOR_FETCH_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"ldm"))
                {
                    v[0]= LDM_FETCH_INSTRUCTION;
                    v[1]= LDM_FETCH_CONTROL;
                    v[2]= LDM_FETCH_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,4,"ldrb"))
                {
                    v[0]= LDRB_FETCH_INSTRUCTION;
                    v[1]= LDRB_FETCH_CONTROL;
                    v[2]= LDRB_FETCH_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"ldr"))
                {
                    v[0]= LDR_FETCH_INSTRUCTION;
                    v[1]= LDR_FETCH_CONTROL;
                    v[2]= LDR_FETCH_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"mcr"))
                {
                    v[0]= MCR_FETCH_INSTRUCTION;
                    v[1]= MCR_FETCH_CONTROL;
                    v[2]= MCR_FETCH_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"mla"))
                {
                    v[0]= MLA_FETCH_INSTRUCTION;
                    v[1]= MLA_FETCH_CONTROL;
                    v[2]= MLA_FETCH_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"mov"))
                {
                    v[0]= MOV_FETCH_INSTRUCTION;
                    v[1]= MOV_FETCH_CONTROL;
                    v[2]= MOV_FETCH_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"mrc"))
                {
                    v[0]= MRC_FETCH_INSTRUCTION;
                    v[1]= MRC_FETCH_CONTROL;
                    v[2]= MRC_FETCH_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"mul"))
                {
                    v[0]= MUL_FETCH_INSTRUCTION;
                    v[1]= MUL_FETCH_CONTROL;
                    v[2]= MUL_FETCH_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"mvn"))
                {
                    v[0]= MVN_FETCH_INSTRUCTION;
                    v[1]= MVN_FETCH_CONTROL;
                    v[2]= MVN_FETCH_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"orr"))
                {
                    v[0]= ORR_FETCH_INSTRUCTION;
                    v[1]= ORR_FETCH_CONTROL;
                    v[2]= ORR_FETCH_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"rsb"))
                {
                    v[0]= RSB_FETCH_INSTRUCTION;
                    v[1]= RSB_FETCH_CONTROL;
                    v[2]= RSB_FETCH_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"rsc"))
                {
                    v[0]= RSC_FETCH_INSTRUCTION;
                    v[1]= RSC_FETCH_CONTROL;
                    v[2]= RSC_FETCH_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3, "sbc"))
                {
                    v[0]= SBC_FETCH_INSTRUCTION;
                    v[1]= SBC_FETCH_CONTROL;
                    v[2]= SBC_FETCH_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"stm"))
                {
                    v[0]= STM_FETCH_INSTRUCTION;
                    v[1]= STM_FETCH_CONTROL;
                    v[2]= STM_FETCH_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,4,"strb"))
                {
                    v[0]= STRB_FETCH_INSTRUCTION;
                    v[1]= STRB_FETCH_CONTROL;
                    v[2]= STRB_FETCH_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"str"))
                {
                    v[0]= STR_FETCH_INSTRUCTION;
                    v[1]= STR_FETCH_CONTROL;
                    v[2]= STR_FETCH_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"sub"))
                {
                    v[0]= SUB_FETCH_INSTRUCTION;
                    v[1]= SUB_FETCH_CONTROL;
                    v[2]= SUB_FETCH_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"swi"))
                {
                    v[0]= SWI_FETCH_INSTRUCTION;
                    v[1]= SWI_FETCH_CONTROL;
                    v[2]= SWI_FETCH_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,4,"swpb"))
                {
                    v[0]= SWPB_FETCH_INSTRUCTION;
                    v[1]= SWPB_FETCH_CONTROL;
                    v[2]= SWPB_FETCH_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"swp"))
                {
                    v[0]= SWP_FETCH_INSTRUCTION;
                    v[1]= SWP_FETCH_CONTROL;
                    v[2]= SWP_FETCH_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"teq"))
                {
                    v[0]= TEQ_FETCH_INSTRUCTION;
                    v[1]= TEQ_FETCH_CONTROL;
                    v[2]= TEQ_FETCH_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"tst"))
                {
                    v[0]= TST_FETCH_INSTRUCTION;
                    v[1]= TST_FETCH_CONTROL;
                    v[2]= TST_FETCH_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,4,"bkpt"))
                {
                    v[0]= BKPT_FETCH_INSTRUCTION;
                    v[1]= BKPT_FETCH_CONTROL;
                    v[2]= BKPT_FETCH_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"blx"))
                {
                    v[0]= BLX_FETCH_INSTRUCTION;
                    v[1]= BLX_FETCH_CONTROL;
                    v[2]= BLX_FETCH_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,2,"bx"))
                {
                    v[0]= BX_FETCH_INSTRUCTION;
                    v[1]= BX_FETCH_CONTROL;
                    v[2]= BX_FETCH_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"clz"))
                {
                    v[0]= CLZ_FETCH_INSTRUCTION;
                    v[1]= CLZ_FETCH_CONTROL;
                    v[2]= CLZ_FETCH_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"pld"))
                {
                    v[0]= PLD_FETCH_INSTRUCTION;
                    v[1]= PLD_FETCH_CONTROL;
                    v[2]= PLD_FETCH_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,4,"qadd"))
                {
                    v[0]= QADD_FETCH_INSTRUCTION;
                    v[1]= QADD_FETCH_CONTROL;
                    v[2]= QADD_FETCH_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,4,"qsub"))
                {
                    v[0]= QSUB_FETCH_INSTRUCTION;
                    v[1]= QSUB_FETCH_CONTROL;
                    v[2]= QSUB_FETCH_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,5,"qdadd"))
                {
                    v[0]= QDADD_FETCH_INSTRUCTION;
                    v[1]= QDADD_FETCH_CONTROL;
                    v[2]= QDADD_FETCH_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,5,"qdsub"))
                {
                    v[0]= QDSUB_FETCH_INSTRUCTION;
                    v[1]= QDSUB_FETCH_CONTROL;
                    v[2]= QDSUB_FETCH_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,6,"smlaxy"))
                {
                    v[0]= SMLAXY_FETCH_INSTRUCTION;
                    v[1]= SMLAXY_FETCH_CONTROL;
                    v[2]= SMLAXY_FETCH_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,7,"smlalxy"))
                {
                    v[0]= SMLALXY_FETCH_INSTRUCTION;
                    v[1]= SMLALXY_FETCH_CONTROL;
                    v[2]= SMLALXY_FETCH_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,6,"smulxy"))
                {
                    v[0]= SMULXY_FETCH_INSTRUCTION;
                    v[1]= SMULXY_FETCH_CONTROL;
                    v[2]= SMULXY_FETCH_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,6,"smlawy"))
                {
                    v[0]= SMLAWY_FETCH_INSTRUCTION;
                    v[1]= SMLAWY_FETCH_CONTROL;
                    v[2]= SMLAWY_FETCH_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,6,"smulwy"))
                {
                    v[0]= SMULWY_FETCH_INSTRUCTION;
                    v[1]= SMULWY_FETCH_CONTROL;
                    v[2]= SMULWY_FETCH_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,5,"smlal"))
                {
                    v[0]= SMLAL_FETCH_INSTRUCTION;
                    v[1]= SMLAL_FETCH_CONTROL;
                    v[2]= SMLAL_FETCH_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,5,"smull"))
                {
                    v[0]= SMULL_FETCH_INSTRUCTION;
                    v[1]= SMULL_FETCH_CONTROL;
                    v[2]= SMULL_FETCH_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,5,"umlal"))
                {
                    v[0]= UMLAL_FETCH_INSTRUCTION;
                    v[1]= UMLAL_FETCH_CONTROL;
                    v[2]= UMLAL_FETCH_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,5,"umull"))
                {
                    v[0]= UMULL_FETCH_INSTRUCTION;
                    v[1]= UMULL_FETCH_CONTROL;
                    v[2]= UMULL_FETCH_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"dmb"))
                {
                    v[0]= DMB_FETCH_INSTRUCTION;
                    v[1]= DMB_FETCH_CONTROL;
                    v[2]= DMB_FETCH_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,6,"uopReg"))
                {
                    v[0]= UOPREG_FETCH_INSTRUCTION;
                    v[1]= UOPREG_FETCH_CONTROL;
                    v[2]= UOPREG_FETCH_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,4,"vmrs"))
                {
                    v[0]= VMRS_FETCH_INSTRUCTION;
                    v[1]= VMRS_FETCH_CONTROL;
                    v[2]= VMRS_FETCH_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,4,"vmsr"))
                {
                    v[0]= VMSR_FETCH_INSTRUCTION;
                    v[1]= VMSR_FETCH_CONTROL;
                    v[2]= VMSR_FETCH_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else
                {
                    v[0]= 0;
                    v[1]= 0;
                    v[2]= 0;
                    return 0;
                }
            }
            else if (Stage == STAGE_DECODE)
            {
                if  (!instruction->staticInst->getName().compare(0,3,"adc"))
                {
                    if (instruction->staticInst->machInst & (1<<25))
                    {
                        v[0]= ADC_DECODE_IMM_INSTRUCTION;
                        v[1]= ADC_DECODE_IMM_CONTROL;
                        v[2]= ADC_DECODE_IMM_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&!(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= ADC_DECODE_SHIFT_INSTRUCTION;
                        v[1]= ADC_DECODE_SHIFT_CONTROL;
                        v[2]= ADC_DECODE_SHIFT_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= ADC_DECODE_SHIFTREG_INSTRUCTION;
                        v[1]= ADC_DECODE_SHIFTREG_CONTROL;
                        v[2]= ADC_DECODE_SHIFTREG_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else
                    {
                        v[0]= 0;
                        v[1]= 0;
                        v[2]= 0;
                        return 0;
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"add"))
                {
                    if (instruction->staticInst->machInst & (1<<25))
                    {
                        v[0]= ADD_DECODE_IMM_INSTRUCTION;
                        v[1]= ADD_DECODE_IMM_CONTROL;
                        v[2]= ADD_DECODE_IMM_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&!(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= ADD_DECODE_SHIFT_INSTRUCTION;
                        v[1]= ADD_DECODE_SHIFT_CONTROL;
                        v[2]= ADD_DECODE_SHIFT_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= ADD_DECODE_SHIFTREG_INSTRUCTION;
                        v[1]= ADD_DECODE_SHIFTREG_CONTROL;
                        v[2]= ADD_DECODE_SHIFTREG_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else
                    {
                        v[0]= 0;
                        v[1]= 0;
                        v[2]= 0;
                        return 0;
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"and"))
                {
                    if (instruction->staticInst->machInst & (1<<25))
                    {
                        v[0]= AND_DECODE_IMM_INSTRUCTION;
                        v[1]= AND_DECODE_IMM_CONTROL;
                        v[2]= AND_DECODE_IMM_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&!(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= AND_DECODE_SHIFT_INSTRUCTION;
                        v[1]= AND_DECODE_SHIFT_CONTROL;
                        v[2]= AND_DECODE_SHIFT_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= AND_DECODE_SHIFTREG_INSTRUCTION;
                        v[1]= AND_DECODE_SHIFTREG_CONTROL;
                        v[2]= AND_DECODE_SHIFTREG_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else
                    {
                        v[0]= 0;
                        v[1]= 0;
                        v[2]= 0;
                        return 0;
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"b"))
                {
                    v[0]= B_DECODE_INSTRUCTION;
                    v[1]= B_DECODE_CONTROL;
                    v[2]= B_DECODE_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"bic"))
                {
                    if (instruction->staticInst->machInst & (1<<25))
                    {
                        v[0]= BIC_DECODE_IMM_INSTRUCTION;
                        v[1]= BIC_DECODE_IMM_CONTROL;
                        v[2]= BIC_DECODE_IMM_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&!(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= BIC_DECODE_SHIFT_INSTRUCTION;
                        v[1]= BIC_DECODE_SHIFT_CONTROL;
                        v[2]= BIC_DECODE_SHIFT_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= BIC_DECODE_SHIFTREG_INSTRUCTION;
                        v[1]= BIC_DECODE_SHIFTREG_CONTROL;
                        v[2]= BIC_DECODE_SHIFTREG_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else
                    {
                        v[0]= 0;
                        v[1]= 0;
                        v[2]= 0;
                        return 0;
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"bl"))
                {
                    v[0]= BL_DECODE_INSTRUCTION;
                    v[1]= BL_DECODE_CONTROL;
                    v[2]= BL_DECODE_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"cmn"))
                {
                    if (instruction->staticInst->machInst & (1<<25))
                    {
                        v[0]= CMN_DECODE_IMM_INSTRUCTION;
                        v[1]= CMN_DECODE_IMM_CONTROL;
                        v[2]= CMN_DECODE_IMM_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&!(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= CMN_DECODE_SHIFT_INSTRUCTION;
                        v[1]= CMN_DECODE_SHIFT_CONTROL;
                        v[2]= CMN_DECODE_SHIFT_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= CMN_DECODE_SHIFTREG_INSTRUCTION;
                        v[1]= CMN_DECODE_SHIFTREG_CONTROL;
                        v[2]= CMN_DECODE_SHIFTREG_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else
                    {
                        v[0]= 0;
                        v[1]= 0;
                        v[2]= 0;
                        return 0;
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"cmp"))
                {
                    if (instruction->staticInst->machInst & (1<<25))
                    {
                        v[0]= CMP_DECODE_IMM_INSTRUCTION;
                        v[1]= CMP_DECODE_IMM_CONTROL;
                        v[2]= CMP_DECODE_IMM_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&!(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= CMP_DECODE_SHIFT_INSTRUCTION;
                        v[1]= CMP_DECODE_SHIFT_CONTROL;
                        v[2]= CMP_DECODE_SHIFT_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= CMP_DECODE_SHIFTREG_INSTRUCTION;
                        v[1]= CMP_DECODE_SHIFTREG_CONTROL;
                        v[2]= CMP_DECODE_SHIFTREG_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else
                    {
                        v[0]= 0;
                        v[1]= 0;
                        v[2]= 0;
                        return 0;
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"eor"))
                {
                    if (instruction->staticInst->machInst & (1<<25))
                    {
                        v[0]= EOR_DECODE_IMM_INSTRUCTION;
                        v[1]= EOR_DECODE_IMM_CONTROL;
                        v[2]= EOR_DECODE_IMM_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&!(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= EOR_DECODE_SHIFT_INSTRUCTION;
                        v[1]= EOR_DECODE_SHIFT_CONTROL;
                        v[2]= EOR_DECODE_SHIFT_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= EOR_DECODE_SHIFTREG_INSTRUCTION;
                        v[1]= EOR_DECODE_SHIFTREG_CONTROL;
                        v[2]= EOR_DECODE_SHIFTREG_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else
                    {
                        v[0]= 0;
                        v[1]= 0;
                        v[2]= 0;
                        return 0;
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,5,"ldmia"))
                {
			if ((instruction->staticInst->machInst & (1<<21))) 
                    	{
				v[0]= LDMIA_U_DECODE_INSTRUCTION;
				v[1]= LDMIA_U_DECODE_CONTROL;
				v[2]= LDMIA_U_DECODE_DATA;
				return (v[0]+v[1]+v[2]);
			}
			else
			{
				v[0]= LDMIA_DECODE_INSTRUCTION;
				v[1]= LDMIA_DECODE_CONTROL;
				v[2]= LDMIA_DECODE_DATA;
				return (v[0]+v[1]+v[2]);
			}
                }
		else if  (!instruction->staticInst->getName().compare(0,5,"ldmib"))
                {
			if ((instruction->staticInst->machInst & (1<<21))) 
                    	{
				v[0]= LDMIB_U_DECODE_INSTRUCTION;
				v[1]= LDMIB_U_DECODE_CONTROL;
				v[2]= LDMIB_U_DECODE_DATA;
				return (v[0]+v[1]+v[2]);
			}
			else
			{
				v[0]= LDMIB_DECODE_INSTRUCTION;
				v[1]= LDMIB_DECODE_CONTROL;
				v[2]= LDMIB_DECODE_DATA;
				return (v[0]+v[1]+v[2]);
			}
                }
		else if  (!instruction->staticInst->getName().compare(0,5,"ldmda"))
                {
			if ((instruction->staticInst->machInst & (1<<21))) 
                    	{
				v[0]= LDMDA_U_DECODE_INSTRUCTION;
				v[1]= LDMDA_U_DECODE_CONTROL;
				v[2]= LDMDA_U_DECODE_DATA;
				return (v[0]+v[1]+v[2]);
			}
			else
			{
				v[0]= LDMDA_DECODE_INSTRUCTION;
				v[1]= LDMDA_DECODE_CONTROL;
				v[2]= LDMDA_DECODE_DATA;
				return (v[0]+v[1]+v[2]);
			}
                }
		else if  (!instruction->staticInst->getName().compare(0,5,"ldmdb"))
                {
			if ((instruction->staticInst->machInst & (1<<21))) 
                    	{
				v[0]= LDMDB_U_DECODE_INSTRUCTION;
				v[1]= LDMDB_U_DECODE_CONTROL;
				v[2]= LDMDB_U_DECODE_DATA;
				return (v[0]+v[1]+v[2]);
			}
			else
			{
				v[0]= LDMDB_DECODE_INSTRUCTION;
				v[1]= LDMDB_DECODE_CONTROL;
				v[2]= LDMDB_DECODE_DATA;
				return (v[0]+v[1]+v[2]);
			}
                }

                else if  (!instruction->staticInst->getName().compare(0,4,"ldrb"))
                {
                    if (!(instruction->staticInst->machInst & (1<<25))) 
                    {
			if (!((instruction->staticInst->machInst & (1<<21))) && ((instruction->staticInst->machInst & (1<<24)))) 
			{
		                v[0]= LDRB_DECODE_B_IMM_INSTRUCTION;
		                v[1]= LDRB_DECODE_B_IMM_CONTROL;
		                v[2]= LDRB_DECODE_B_IMM_DATA;
		                return (v[0]+v[1]+v[2]);
			}
			else if (((instruction->staticInst->machInst & (1<<21))) && ((instruction->staticInst->machInst & (1<<24))))
			{
				v[0]= LDRB_DECODE_BU_IMM_INSTRUCTION;
		                v[1]= LDRB_DECODE_BU_IMM_CONTROL;
		                v[2]= LDRB_DECODE_BU_IMM_DATA;
		                return (v[0]+v[1]+v[2]);
			}
			else
			{
				v[0]= LDRB_DECODE_A_IMM_INSTRUCTION;
		                v[1]= LDRB_DECODE_A_IMM_CONTROL;
		                v[2]= LDRB_DECODE_A_IMM_DATA;
		                return (v[0]+v[1]+v[2]);
			}
                    }
                    else if ((instruction->staticInst->machInst & (1<<25))&& !(instruction->staticInst->machInst & (255<<4)))
                    {
                        if (!((instruction->staticInst->machInst & (1<<21))) && ((instruction->staticInst->machInst & (1<<24)))) 
			{
		                v[0]= LDRB_DECODE_B_REG_INSTRUCTION;
		                v[1]= LDRB_DECODE_B_REG_CONTROL;
		                v[2]= LDRB_DECODE_B_REG_DATA;
		                return (v[0]+v[1]+v[2]);
			}
			else if (((instruction->staticInst->machInst & (1<<21))) && ((instruction->staticInst->machInst & (1<<24))))
			{
				v[0]= LDRB_DECODE_BU_REG_INSTRUCTION;
		                v[1]= LDRB_DECODE_BU_REG_CONTROL;
		                v[2]= LDRB_DECODE_BU_REG_DATA;
		                return (v[0]+v[1]+v[2]);
			}
			else
			{
				v[0]= LDRB_DECODE_A_REG_INSTRUCTION;
		                v[1]= LDRB_DECODE_A_REG_CONTROL;
		                v[2]= LDRB_DECODE_A_REG_DATA;
		                return (v[0]+v[1]+v[2]);
			}
                    }
                    else 
                    {
                        if (!((instruction->staticInst->machInst & (1<<21))) && ((instruction->staticInst->machInst & (1<<24)))) 
			{
		                v[0]= LDRB_DECODE_B_SHIFTREG_INSTRUCTION;
		                v[1]= LDRB_DECODE_B_SHIFTREG_CONTROL;
		                v[2]= LDRB_DECODE_B_SHIFTREG_DATA;
		                return (v[0]+v[1]+v[2]);
			}
			else if (((instruction->staticInst->machInst & (1<<21))) && ((instruction->staticInst->machInst & (1<<24))))
			{
				v[0]= LDRB_DECODE_BU_SHIFTREG_INSTRUCTION;
		                v[1]= LDRB_DECODE_BU_SHIFTREG_CONTROL;
		                v[2]= LDRB_DECODE_BU_SHIFTREG_DATA;
		                return (v[0]+v[1]+v[2]);
			}
			else
			{
				v[0]= LDRB_DECODE_A_SHIFTREG_INSTRUCTION;
		                v[1]= LDRB_DECODE_A_SHIFTREG_CONTROL;
		                v[2]= LDRB_DECODE_A_SHIFTREG_DATA;
		                return (v[0]+v[1]+v[2]);
			}
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"ldr"))
                {
                    if (!(instruction->staticInst->machInst & (1<<25))) 
                    {
			if (!((instruction->staticInst->machInst & (1<<21))) && ((instruction->staticInst->machInst & (1<<24)))) 
			{
		                v[0]= LDR_DECODE_B_IMM_INSTRUCTION;
		                v[1]= LDR_DECODE_B_IMM_CONTROL;
		                v[2]= LDR_DECODE_B_IMM_DATA;
		                return (v[0]+v[1]+v[2]);
			}
			else if (((instruction->staticInst->machInst & (1<<21))) && ((instruction->staticInst->machInst & (1<<24))))
			{
				v[0]= LDR_DECODE_BU_IMM_INSTRUCTION;
		                v[1]= LDR_DECODE_BU_IMM_CONTROL;
		                v[2]= LDR_DECODE_BU_IMM_DATA;
		                return (v[0]+v[1]+v[2]);
			}
			else
			{
				v[0]= LDR_DECODE_A_IMM_INSTRUCTION;
		                v[1]= LDR_DECODE_A_IMM_CONTROL;
		                v[2]= LDR_DECODE_A_IMM_DATA;
		                return (v[0]+v[1]+v[2]);
			}
                    }
                    else if ((instruction->staticInst->machInst & (1<<25))&& !(instruction->staticInst->machInst & (255<<4)))
                    {
                        if (!((instruction->staticInst->machInst & (1<<21))) && ((instruction->staticInst->machInst & (1<<24)))) 
			{
		                v[0]= LDR_DECODE_B_REG_INSTRUCTION;
		                v[1]= LDR_DECODE_B_REG_CONTROL;
		                v[2]= LDR_DECODE_B_REG_DATA;
		                return (v[0]+v[1]+v[2]);
			}
			else if (((instruction->staticInst->machInst & (1<<21))) && ((instruction->staticInst->machInst & (1<<24))))
			{
				v[0]= LDR_DECODE_BU_REG_INSTRUCTION;
		                v[1]= LDR_DECODE_BU_REG_CONTROL;
		                v[2]= LDR_DECODE_BU_REG_DATA;
		                return (v[0]+v[1]+v[2]);
			}
			else
			{
				v[0]= LDR_DECODE_A_REG_INSTRUCTION;
		                v[1]= LDR_DECODE_A_REG_CONTROL;
		                v[2]= LDR_DECODE_A_REG_DATA;
		                return (v[0]+v[1]+v[2]);
			}
                    }
                    else 
                    {
                        if (!((instruction->staticInst->machInst & (1<<21))) && ((instruction->staticInst->machInst & (1<<24)))) 
			{
		                v[0]= LDR_DECODE_B_SHIFTREG_INSTRUCTION;
		                v[1]= LDR_DECODE_B_SHIFTREG_CONTROL;
		                v[2]= LDR_DECODE_B_SHIFTREG_DATA;
		                return (v[0]+v[1]+v[2]);
			}
			else if (((instruction->staticInst->machInst & (1<<21))) && ((instruction->staticInst->machInst & (1<<24))))
			{
				v[0]= LDR_DECODE_BU_SHIFTREG_INSTRUCTION;
		                v[1]= LDR_DECODE_BU_SHIFTREG_CONTROL;
		                v[2]= LDR_DECODE_BU_SHIFTREG_DATA;
		                return (v[0]+v[1]+v[2]);
			}
			else
			{
				v[0]= LDR_DECODE_A_SHIFTREG_INSTRUCTION;
		                v[1]= LDR_DECODE_A_SHIFTREG_CONTROL;
		                v[2]= LDR_DECODE_A_SHIFTREG_DATA;
		                return (v[0]+v[1]+v[2]);
			}
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"mcr"))
                {
                    v[0]= MCR_DECODE_INSTRUCTION;
                    v[1]= MCR_DECODE_CONTROL;
                    v[2]= MCR_DECODE_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"mla"))
                {
                    v[0]= MLA_DECODE_INSTRUCTION;
                    v[1]= MLA_DECODE_CONTROL;
                    v[2]= MLA_DECODE_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"mov"))
                {
                    if (instruction->staticInst->machInst & (1<<25))
                    {
                        v[0]= MOV_DECODE_IMM_INSTRUCTION;
                        v[1]= MOV_DECODE_IMM_CONTROL;
                        v[2]= MOV_DECODE_IMM_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&!(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= MOV_DECODE_SHIFT_INSTRUCTION;
                        v[1]= MOV_DECODE_SHIFT_CONTROL;
                        v[2]= MOV_DECODE_SHIFT_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= MOV_DECODE_SHIFTREG_INSTRUCTION;
                        v[1]= MOV_DECODE_SHIFTREG_CONTROL;
                        v[2]= MOV_DECODE_SHIFTREG_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else
                    {
                        v[0]= 0;
                        v[1]= 0;
                        v[2]= 0;
                        return 0;
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"mrc"))
                {
                    v[0]= MRC_DECODE_INSTRUCTION;
                    v[1]= MRC_DECODE_CONTROL;
                    v[2]= MRC_DECODE_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"mul"))
                {
                    v[0]= MUL_DECODE_INSTRUCTION;
                    v[1]= MUL_DECODE_CONTROL;
                    v[2]= MUL_DECODE_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"mvn"))
                {
                    if (instruction->staticInst->machInst & (1<<25))
                    {
                        v[0]= MVN_DECODE_IMM_INSTRUCTION;
                        v[1]= MVN_DECODE_IMM_CONTROL;
                        v[2]= MVN_DECODE_IMM_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&!(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= MVN_DECODE_SHIFT_INSTRUCTION;
                        v[1]= MVN_DECODE_SHIFT_CONTROL;
                        v[2]= MVN_DECODE_SHIFT_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= MVN_DECODE_SHIFTREG_INSTRUCTION;
                        v[1]= MVN_DECODE_SHIFTREG_CONTROL;
                        v[2]= MVN_DECODE_SHIFTREG_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else
                    {
                        v[0]= 0;
                        v[1]= 0;
                        v[2]= 0;
                        return 0;
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"orr"))
                {
                    if (instruction->staticInst->machInst & (1<<25))
                    {
                        v[0]= ORR_DECODE_IMM_INSTRUCTION;
                        v[1]= ORR_DECODE_IMM_CONTROL;
                        v[2]= ORR_DECODE_IMM_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&!(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= ORR_DECODE_SHIFT_INSTRUCTION;
                        v[1]= ORR_DECODE_SHIFT_CONTROL;
                        v[2]= ORR_DECODE_SHIFT_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= ORR_DECODE_SHIFTREG_INSTRUCTION;
                        v[1]= ORR_DECODE_SHIFTREG_CONTROL;
                        v[2]= ORR_DECODE_SHIFTREG_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else
                    {
                        v[0]= 0;
                        v[1]= 0;
                        v[2]= 0;
                        return 0;
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"rsb"))
                {
                    if (instruction->staticInst->machInst & (1<<25))
                    {
                        v[0]= RSB_DECODE_IMM_INSTRUCTION;
                        v[1]= RSB_DECODE_IMM_CONTROL;
                        v[2]= RSB_DECODE_IMM_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&!(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= RSB_DECODE_SHIFT_INSTRUCTION;
                        v[1]= RSB_DECODE_SHIFT_CONTROL;
                        v[2]= RSB_DECODE_SHIFT_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= RSB_DECODE_SHIFTREG_INSTRUCTION;
                        v[1]= RSB_DECODE_SHIFTREG_CONTROL;
                        v[2]= RSB_DECODE_SHIFTREG_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else
                    {
                        v[0]= 0;
                        v[1]= 0;
                        v[2]= 0;
                        return 0;
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"rsc"))
                {
                    if (instruction->staticInst->machInst & (1<<25))
                    {
                        v[0]= RSC_DECODE_IMM_INSTRUCTION;
                        v[1]= RSC_DECODE_IMM_CONTROL;
                        v[2]= RSC_DECODE_IMM_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&!(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= RSC_DECODE_SHIFT_INSTRUCTION;
                        v[1]= RSC_DECODE_SHIFT_CONTROL;
                        v[2]= RSC_DECODE_SHIFT_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= RSC_DECODE_SHIFTREG_INSTRUCTION;
                        v[1]= RSC_DECODE_SHIFTREG_CONTROL;
                        v[2]= RSC_DECODE_SHIFTREG_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else
                    {
                        v[0]= 0;
                        v[1]= 0;
                        v[2]= 0;
                        return 0;
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,3, "sbc"))
                {
                    if (instruction->staticInst->machInst & (1<<25))
                    {
                        v[0]= SBC_DECODE_IMM_INSTRUCTION;
                        v[1]= SBC_DECODE_IMM_CONTROL;
                        v[2]= SBC_DECODE_IMM_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&!(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= SBC_DECODE_SHIFT_INSTRUCTION;
                        v[1]= SBC_DECODE_SHIFT_CONTROL;
                        v[2]= SBC_DECODE_SHIFT_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= SBC_DECODE_SHIFTREG_INSTRUCTION;
                        v[1]= SBC_DECODE_SHIFTREG_CONTROL;
                        v[2]= SBC_DECODE_SHIFTREG_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else
                    {
                        v[0]= 0;
                        v[1]= 0;
                        v[2]= 0;
                        return 0;
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,5,"stmia"))
                {
			if ((instruction->staticInst->machInst & (1<<21))) 
                    	{
				v[0]= STMIA_U_DECODE_INSTRUCTION;
				v[1]= STMIA_U_DECODE_CONTROL;
				v[2]= STMIA_U_DECODE_DATA;
				return (v[0]+v[1]+v[2]);
			}
			else
			{
				v[0]= STMIA_DECODE_INSTRUCTION;
				v[1]= STMIA_DECODE_CONTROL;
				v[2]= STMIA_DECODE_DATA;
				return (v[0]+v[1]+v[2]);
			}
                }
		else if  (!instruction->staticInst->getName().compare(0,5,"stmib"))
                {
			if ((instruction->staticInst->machInst & (1<<21))) 
                    	{
				v[0]= STMIB_U_DECODE_INSTRUCTION;
				v[1]= STMIB_U_DECODE_CONTROL;
				v[2]= STMIB_U_DECODE_DATA;
				return (v[0]+v[1]+v[2]);
			}
			else
			{
				v[0]= STMIB_DECODE_INSTRUCTION;
				v[1]= STMIB_DECODE_CONTROL;
				v[2]= STMIB_DECODE_DATA;
				return (v[0]+v[1]+v[2]);
			}
                }
		else if  (!instruction->staticInst->getName().compare(0,5,"stmda"))
                {
			if ((instruction->staticInst->machInst & (1<<21))) 
                    	{
				v[0]= STMDA_U_DECODE_INSTRUCTION;
				v[1]= STMDA_U_DECODE_CONTROL;
				v[2]= STMDA_U_DECODE_DATA;
				return (v[0]+v[1]+v[2]);
			}
			else
			{
				v[0]= STMDA_DECODE_INSTRUCTION;
				v[1]= STMDA_DECODE_CONTROL;
				v[2]= STMDA_DECODE_DATA;
				return (v[0]+v[1]+v[2]);
			}
                }
		else if  (!instruction->staticInst->getName().compare(0,5,"stmdb"))
                {
			if ((instruction->staticInst->machInst & (1<<21))) 
                    	{
				v[0]= STMDB_U_DECODE_INSTRUCTION;
				v[1]= STMDB_U_DECODE_CONTROL;
				v[2]= STMDB_U_DECODE_DATA;
				return (v[0]+v[1]+v[2]);
			}
			else
			{
				v[0]= STMDB_DECODE_INSTRUCTION;
				v[1]= STMDB_DECODE_CONTROL;
				v[2]= STMDB_DECODE_DATA;
				return (v[0]+v[1]+v[2]);
			}
                }
                else if  (!instruction->staticInst->getName().compare(0,4,"strb"))
                {
                    if (!(instruction->staticInst->machInst & (1<<25))) 
                    {
			if (!((instruction->staticInst->machInst & (1<<21))) && ((instruction->staticInst->machInst & (1<<24)))) 
			{
		                v[0]= STRB_DECODE_B_IMM_INSTRUCTION;
		                v[1]= STRB_DECODE_B_IMM_CONTROL;
		                v[2]= STRB_DECODE_B_IMM_DATA;
		                return (v[0]+v[1]+v[2]);
			}
			else if (((instruction->staticInst->machInst & (1<<21))) && ((instruction->staticInst->machInst & (1<<24))))
			{
				v[0]= STRB_DECODE_BU_IMM_INSTRUCTION;
		                v[1]= STRB_DECODE_BU_IMM_CONTROL;
		                v[2]= STRB_DECODE_BU_IMM_DATA;
		                return (v[0]+v[1]+v[2]);
			}
			else
			{
				v[0]= STRB_DECODE_A_IMM_INSTRUCTION;
		                v[1]= STRB_DECODE_A_IMM_CONTROL;
		                v[2]= STRB_DECODE_A_IMM_DATA;
		                return (v[0]+v[1]+v[2]);
			}
                    }
                    else if ((instruction->staticInst->machInst & (1<<25))&& !(instruction->staticInst->machInst & (255<<4)))
                    {
                        if (!((instruction->staticInst->machInst & (1<<21))) && ((instruction->staticInst->machInst & (1<<24)))) 
			{
		                v[0]= STRB_DECODE_B_REG_INSTRUCTION;
		                v[1]= STRB_DECODE_B_REG_CONTROL;
		                v[2]= STRB_DECODE_B_REG_DATA;
		                return (v[0]+v[1]+v[2]);
			}
			else if (((instruction->staticInst->machInst & (1<<21))) && ((instruction->staticInst->machInst & (1<<24))))
			{
				v[0]= STRB_DECODE_BU_REG_INSTRUCTION;
		                v[1]= STRB_DECODE_BU_REG_CONTROL;
		                v[2]= STRB_DECODE_BU_REG_DATA;
		                return (v[0]+v[1]+v[2]);
			}
			else
			{
				v[0]= STRB_DECODE_A_REG_INSTRUCTION;
		                v[1]= STRB_DECODE_A_REG_CONTROL;
		                v[2]= STRB_DECODE_A_REG_DATA;
		                return (v[0]+v[1]+v[2]);
			}
                    }
                    else 
                    {
                        if (!((instruction->staticInst->machInst & (1<<21))) && ((instruction->staticInst->machInst & (1<<24)))) 
			{
		                v[0]= STRB_DECODE_B_SHIFTREG_INSTRUCTION;
		                v[1]= STRB_DECODE_B_SHIFTREG_CONTROL;
		                v[2]= STRB_DECODE_B_SHIFTREG_DATA;
		                return (v[0]+v[1]+v[2]);
			}
			else if (((instruction->staticInst->machInst & (1<<21))) && ((instruction->staticInst->machInst & (1<<24))))
			{
				v[0]= STRB_DECODE_BU_SHIFTREG_INSTRUCTION;
		                v[1]= STRB_DECODE_BU_SHIFTREG_CONTROL;
		                v[2]= STRB_DECODE_BU_SHIFTREG_DATA;
		                return (v[0]+v[1]+v[2]);
			}
			else
			{
				v[0]= STRB_DECODE_A_SHIFTREG_INSTRUCTION;
		                v[1]= STRB_DECODE_A_SHIFTREG_CONTROL;
		                v[2]= STRB_DECODE_A_SHIFTREG_DATA;
		                return (v[0]+v[1]+v[2]);
			}
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"str"))
                {
                    if (!(instruction->staticInst->machInst & (1<<25))) 
                    {
			if (!((instruction->staticInst->machInst & (1<<21))) && ((instruction->staticInst->machInst & (1<<24)))) 
			{
		                v[0]= STR_DECODE_B_IMM_INSTRUCTION;
		                v[1]= STR_DECODE_B_IMM_CONTROL;
		                v[2]= STR_DECODE_B_IMM_DATA;
		                return (v[0]+v[1]+v[2]);
			}
			else if (((instruction->staticInst->machInst & (1<<21))) && ((instruction->staticInst->machInst & (1<<24))))
			{
				v[0]= STR_DECODE_BU_IMM_INSTRUCTION;
		                v[1]= STR_DECODE_BU_IMM_CONTROL;
		                v[2]= STR_DECODE_BU_IMM_DATA;
		                return (v[0]+v[1]+v[2]);
			}
			else
			{
				v[0]= STR_DECODE_A_IMM_INSTRUCTION;
		                v[1]= STR_DECODE_A_IMM_CONTROL;
		                v[2]= STR_DECODE_A_IMM_DATA;
		                return (v[0]+v[1]+v[2]);
			}
                    }
                    else if ((instruction->staticInst->machInst & (1<<25))&& !(instruction->staticInst->machInst & (255<<4)))
                    {
                        if (!((instruction->staticInst->machInst & (1<<21))) && ((instruction->staticInst->machInst & (1<<24)))) 
			{
		                v[0]= STR_DECODE_B_REG_INSTRUCTION;
		                v[1]= STR_DECODE_B_REG_CONTROL;
		                v[2]= STR_DECODE_B_REG_DATA;
		                return (v[0]+v[1]+v[2]);
			}
			else if (((instruction->staticInst->machInst & (1<<21))) && ((instruction->staticInst->machInst & (1<<24))))
			{
				v[0]= STR_DECODE_BU_REG_INSTRUCTION;
		                v[1]= STR_DECODE_BU_REG_CONTROL;
		                v[2]= STR_DECODE_BU_REG_DATA;
		                return (v[0]+v[1]+v[2]);
			}
			else
			{
				v[0]= STR_DECODE_A_REG_INSTRUCTION;
		                v[1]= STR_DECODE_A_REG_CONTROL;
		                v[2]= STR_DECODE_A_REG_DATA;
		                return (v[0]+v[1]+v[2]);
			}
                    }
                    else 
                    {
                        if (!((instruction->staticInst->machInst & (1<<21))) && ((instruction->staticInst->machInst & (1<<24)))) 
			{
		                v[0]= STR_DECODE_B_SHIFTREG_INSTRUCTION;
		                v[1]= STR_DECODE_B_SHIFTREG_CONTROL;
		                v[2]= STR_DECODE_B_SHIFTREG_DATA;
		                return (v[0]+v[1]+v[2]);
			}
			else if (((instruction->staticInst->machInst & (1<<21))) && ((instruction->staticInst->machInst & (1<<24))))
			{
				v[0]= STR_DECODE_BU_SHIFTREG_INSTRUCTION;
		                v[1]= STR_DECODE_BU_SHIFTREG_CONTROL;
		                v[2]= STR_DECODE_BU_SHIFTREG_DATA;
		                return (v[0]+v[1]+v[2]);
			}
			else
			{
				v[0]= STR_DECODE_A_SHIFTREG_INSTRUCTION;
		                v[1]= STR_DECODE_A_SHIFTREG_CONTROL;
		                v[2]= STR_DECODE_A_SHIFTREG_DATA;
		                return (v[0]+v[1]+v[2]);
			}
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"sub"))
                {
                    if (instruction->staticInst->machInst & (1<<25))
                    {
                        v[0]= SUB_DECODE_IMM_INSTRUCTION;
                        v[1]= SUB_DECODE_IMM_CONTROL;
                        v[2]= SUB_DECODE_IMM_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&!(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= SUB_DECODE_SHIFT_INSTRUCTION;
                        v[1]= SUB_DECODE_SHIFT_CONTROL;
                        v[2]= SUB_DECODE_SHIFT_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= SUB_DECODE_SHIFTREG_INSTRUCTION;
                        v[1]= SUB_DECODE_SHIFTREG_CONTROL;
                        v[2]= SUB_DECODE_SHIFTREG_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else
                    {
                        v[0]= 0;
                        v[1]= 0;
                        v[2]= 0;
                        return 0;
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"swi"))
                {
                    v[0]= SWI_DECODE_INSTRUCTION;
                    v[1]= SWI_DECODE_CONTROL;
                    v[2]= SWI_DECODE_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,4,"swpb"))
                {
                    v[0]= SWPB_DECODE_INSTRUCTION;
                    v[1]= SWPB_DECODE_CONTROL;
                    v[2]= SWPB_DECODE_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"swp"))
                {
                    v[0]= SWP_DECODE_INSTRUCTION;
                    v[1]= SWP_DECODE_CONTROL;
                    v[2]= SWP_DECODE_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"teq"))
                {
                    if (instruction->staticInst->machInst & (1<<25))
                    {
                        v[0]= TEQ_DECODE_IMM_INSTRUCTION;
                        v[1]= TEQ_DECODE_IMM_CONTROL;
                        v[2]= TEQ_DECODE_IMM_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&!(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= TEQ_DECODE_SHIFT_INSTRUCTION;
                        v[1]= TEQ_DECODE_SHIFT_CONTROL;
                        v[2]= TEQ_DECODE_SHIFT_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= TEQ_DECODE_SHIFTREG_INSTRUCTION;
                        v[1]= TEQ_DECODE_SHIFTREG_CONTROL;
                        v[2]= TEQ_DECODE_SHIFTREG_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else
                    {
                        v[0]= 0;
                        v[1]= 0;
                        v[2]= 0;
                        return 0;
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"tst"))
                {
                    if (instruction->staticInst->machInst & (1<<25))
                    {
                        v[0]= TST_DECODE_IMM_INSTRUCTION;
                        v[1]= TST_DECODE_IMM_CONTROL;
                        v[2]= TST_DECODE_IMM_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&!(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= TST_DECODE_SHIFT_INSTRUCTION;
                        v[1]= TST_DECODE_SHIFT_CONTROL;
                        v[2]= TST_DECODE_SHIFT_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= TST_DECODE_SHIFTREG_INSTRUCTION;
                        v[1]= TST_DECODE_SHIFTREG_CONTROL;
                        v[2]= TST_DECODE_SHIFTREG_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else
                    {
                        v[0]= 0;
                        v[1]= 0;
                        v[2]= 0;
                        return 0;
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,4,"bkpt"))
                {
                    v[0]= BKPT_DECODE_INSTRUCTION;
                    v[1]= BKPT_DECODE_CONTROL;
                    v[2]= BKPT_DECODE_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"blx"))
                {
                    v[0]= BLX_DECODE_INSTRUCTION;
                    v[1]= BLX_DECODE_CONTROL;
                    v[2]= BLX_DECODE_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,2,"bx"))
                {
                    v[0]= BX_DECODE_INSTRUCTION;
                    v[1]= BX_DECODE_CONTROL;
                    v[2]= BX_DECODE_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"clz"))
                {
                    v[0]= CLZ_DECODE_INSTRUCTION;
                    v[1]= CLZ_DECODE_CONTROL;
                    v[2]= CLZ_DECODE_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"pld"))
                {
                    v[0]= PLD_DECODE_INSTRUCTION;
                    v[1]= PLD_DECODE_CONTROL;
                    v[2]= PLD_DECODE_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,4,"qadd"))
                {
                    if (instruction->staticInst->machInst & (1<<25))
                    {
                        v[0]= QADD_DECODE_IMM_INSTRUCTION;
                        v[1]= QADD_DECODE_IMM_CONTROL;
                        v[2]= QADD_DECODE_IMM_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&!(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= QADD_DECODE_SHIFT_INSTRUCTION;
                        v[1]= QADD_DECODE_SHIFT_CONTROL;
                        v[2]= QADD_DECODE_SHIFT_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= QADD_DECODE_SHIFTREG_INSTRUCTION;
                        v[1]= QADD_DECODE_SHIFTREG_CONTROL;
                        v[2]= QADD_DECODE_SHIFTREG_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else
                    {
                        v[0]= 0;
                        v[1]= 0;
                        v[2]= 0;
                        return 0;
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,4,"qsub"))
                {
                    if (instruction->staticInst->machInst & (1<<25))
                    {
                        v[0]= QSUB_DECODE_IMM_INSTRUCTION;
                        v[1]= QSUB_DECODE_IMM_CONTROL;
                        v[2]= QSUB_DECODE_IMM_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&!(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= QSUB_DECODE_SHIFT_INSTRUCTION;
                        v[1]= QSUB_DECODE_SHIFT_CONTROL;
                        v[2]= QSUB_DECODE_SHIFT_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= QSUB_DECODE_SHIFTREG_INSTRUCTION;
                        v[1]= QSUB_DECODE_SHIFTREG_CONTROL;
                        v[2]= QSUB_DECODE_SHIFTREG_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else
                    {
                        v[0]= 0;
                        v[1]= 0;
                        v[2]= 0;
                        return 0;
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,5,"qdadd"))
                {
                    if (instruction->staticInst->machInst & (1<<25))
                    {
                        v[0]= QDADD_DECODE_IMM_INSTRUCTION;
                        v[1]= QDADD_DECODE_IMM_CONTROL;
                        v[2]= QDADD_DECODE_IMM_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&!(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= QDADD_DECODE_SHIFT_INSTRUCTION;
                        v[1]= QDADD_DECODE_SHIFT_CONTROL;
                        v[2]= QDADD_DECODE_SHIFT_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= QDADD_DECODE_SHIFTREG_INSTRUCTION;
                        v[1]= QDADD_DECODE_SHIFTREG_CONTROL;
                        v[2]= QDADD_DECODE_SHIFTREG_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else
                    {
                        v[0]= 0;
                        v[1]= 0;
                        v[2]= 0;
                        return 0;
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,5,"qdsub"))
                {
                    if (instruction->staticInst->machInst & (1<<25))
                    {
                        v[0]= QDSUB_DECODE_IMM_INSTRUCTION;
                        v[1]= QDSUB_DECODE_IMM_CONTROL;
                        v[2]= QDSUB_DECODE_IMM_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&!(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= QDSUB_DECODE_SHIFT_INSTRUCTION;
                        v[1]= QDSUB_DECODE_SHIFT_CONTROL;
                        v[2]= QDSUB_DECODE_SHIFT_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= QDSUB_DECODE_SHIFTREG_INSTRUCTION;
                        v[1]= QDSUB_DECODE_SHIFTREG_CONTROL;
                        v[2]= QDSUB_DECODE_SHIFTREG_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else
                    {
                        v[0]= 0;
                        v[1]= 0;
                        v[2]= 0;
                        return 0;
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,6,"smlaxy"))
                {
                    v[0]= SMLAXY_DECODE_INSTRUCTION;
                    v[1]= SMLAXY_DECODE_CONTROL;
                    v[2]= SMLAXY_DECODE_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,7,"smlalxy"))
                {
                    v[0]= SMLALXY_DECODE_INSTRUCTION;
                    v[1]= SMLALXY_DECODE_CONTROL;
                    v[2]= SMLALXY_DECODE_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,6,"smulxy"))
                {
                    v[0]= SMULXY_DECODE_INSTRUCTION;
                    v[1]= SMULXY_DECODE_CONTROL;
                    v[2]= SMULXY_DECODE_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,6,"smlawy"))
                {
                    v[0]= SMLAWY_DECODE_INSTRUCTION;
                    v[1]= SMLAWY_DECODE_CONTROL;
                    v[2]= SMLAWY_DECODE_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,6,"smulwy"))
                {
                    v[0]= SMULWY_DECODE_INSTRUCTION;
                    v[1]= SMULWY_DECODE_CONTROL;
                    v[2]= SMULWY_DECODE_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,5,"smlal"))
                {
                    v[0]= SMLAL_DECODE_INSTRUCTION;
                    v[1]= SMLAL_DECODE_CONTROL;
                    v[2]= SMLAL_DECODE_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,5,"smull"))
                {
                    v[0]= SMULL_DECODE_INSTRUCTION;
                    v[1]= SMULL_DECODE_CONTROL;
                    v[2]= SMULL_DECODE_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,5,"umlal"))
                {
                    v[0]= UMLAL_DECODE_INSTRUCTION;
                    v[1]= UMLAL_DECODE_CONTROL;
                    v[2]= UMLAL_DECODE_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,5,"umull"))
                {
                    v[0]= UMULL_DECODE_INSTRUCTION;
                    v[1]= UMULL_DECODE_CONTROL;
                    v[2]= UMULL_DECODE_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"dmb"))
                {
                    v[0]= DMB_DECODE_INSTRUCTION;
                    v[1]= DMB_DECODE_CONTROL;
                    v[2]= DMB_DECODE_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,6,"uopReg"))
                {
                    v[0]= UOPREG_DECODE_INSTRUCTION;
                    v[1]= UOPREG_DECODE_CONTROL;
                    v[2]= UOPREG_DECODE_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,4,"vmrs"))
                {
                    v[0]= VMRS_DECODE_INSTRUCTION;
                    v[1]= VMRS_DECODE_CONTROL;
                    v[2]= VMRS_DECODE_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,4,"vmsr"))
                {
                    v[0]= VMSR_DECODE_INSTRUCTION;
                    v[1]= VMSR_DECODE_CONTROL;
                    v[2]= VMSR_DECODE_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else
                {
                    v[0]= 0;
                    v[1]= 0;
                    v[2]= 0;
                    return 0;
                }
            }
            else if (Stage == STAGE_DECODE_PLUS)
            {
                if  (!instruction->staticInst->getName().compare(0,3,"adc"))
                {
                    if (instruction->staticInst->machInst & (1<<25))
                    {
                        v[0]= ADC_DECODE_PLUS_IM_INSTRUCTION;
                        v[1]= ADC_DECODE_PLUS_IM_CONTROL;
                        v[2]= ADC_DECODE_PLUS_IM_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&!(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= ADC_DECODE_PLUS_S_INSTRUCTION;
                        v[1]= ADC_DECODE_PLUS_S_CONTROL;
                        v[2]= ADC_DECODE_PLUS_S_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= ADC_DECODE_PLUS_SR_INSTRUCTION;
                        v[1]= ADC_DECODE_PLUS_SR_CONTROL;
                        v[2]= ADC_DECODE_PLUS_SR_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else
                    {
                        v[0]= 0;
                        v[1]= 0;
                        v[2]= 0;
                        return 0;
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"add"))
                {    
                    if (instruction->staticInst->machInst & (1<<25))
                    {
                        v[0]= ADD_DECODE_PLUS_IM_INSTRUCTION;
                        v[1]= ADD_DECODE_PLUS_IM_CONTROL;
                        v[2]= ADD_DECODE_PLUS_IM_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&!(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= ADD_DECODE_PLUS_S_INSTRUCTION;
                        v[1]= ADD_DECODE_PLUS_S_CONTROL;
                        v[2]= ADD_DECODE_PLUS_S_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= ADD_DECODE_PLUS_SR_INSTRUCTION;
                        v[1]= ADD_DECODE_PLUS_SR_CONTROL;
                        v[2]= ADD_DECODE_PLUS_SR_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else
                    {
                        v[0]= 0;
                        v[1]= 0;
                        v[2]= 0;
                        return 0;
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"and"))
                {
                    if (instruction->staticInst->machInst & (1<<25))
                    {
                        v[0]= AND_DECODE_PLUS_IM_INSTRUCTION;
                        v[1]= AND_DECODE_PLUS_IM_CONTROL;
                        v[2]= AND_DECODE_PLUS_IM_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&!(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= AND_DECODE_PLUS_S_INSTRUCTION;
                        v[1]= AND_DECODE_PLUS_S_CONTROL;
                        v[2]= AND_DECODE_PLUS_S_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= AND_DECODE_PLUS_SR_INSTRUCTION;
                        v[1]= AND_DECODE_PLUS_SR_CONTROL;
                        v[2]= AND_DECODE_PLUS_SR_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else
                    {
                        v[0]= 0;
                        v[1]= 0;
                        v[2]= 0;
                        return 0;
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"b"))
                {
                    v[0]= B_DECODE_PLUS_INSTRUCTION;
                    v[1]= B_DECODE_PLUS_CONTROL;
                    v[2]= B_DECODE_PLUS_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"bic"))
                {
                    if (instruction->staticInst->machInst & (1<<25))
                    {
                        v[0]= BIC_DECODE_PLUS_IM_INSTRUCTION;
                        v[1]= BIC_DECODE_PLUS_IM_CONTROL;
                        v[2]= BIC_DECODE_PLUS_IM_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&!(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= BIC_DECODE_PLUS_S_INSTRUCTION;
                        v[1]= BIC_DECODE_PLUS_S_CONTROL;
                        v[2]= BIC_DECODE_PLUS_S_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= BIC_DECODE_PLUS_SR_INSTRUCTION;
                        v[1]= BIC_DECODE_PLUS_SR_CONTROL;
                        v[2]= BIC_DECODE_PLUS_SR_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else
                    {
                        v[0]= 0;
                        v[1]= 0;
                        v[2]= 0;
                        return 0;
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"bl"))
                {
                    v[0]= BL_DECODE_PLUS_INSTRUCTION;
                    v[1]= BL_DECODE_PLUS_CONTROL;
                    v[2]= BL_DECODE_PLUS_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"cmn"))
                {
                    if (instruction->staticInst->machInst & (1<<25))
                    {
                        v[0]= CMN_DECODE_PLUS_IM_INSTRUCTION;
                        v[1]= CMN_DECODE_PLUS_IM_CONTROL;
                        v[2]= CMN_DECODE_PLUS_IM_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&!(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= CMN_DECODE_PLUS_S_INSTRUCTION;
                        v[1]= CMN_DECODE_PLUS_S_CONTROL;
                        v[2]= CMN_DECODE_PLUS_S_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= CMN_DECODE_PLUS_SR_INSTRUCTION;
                        v[1]= CMN_DECODE_PLUS_SR_CONTROL;
                        v[2]= CMN_DECODE_PLUS_SR_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else
                    {
                        v[0]= 0;
                        v[1]= 0;
                        v[2]= 0;
                        return 0;
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"cmp"))
                {
                    if (instruction->staticInst->machInst & (1<<25))
                    {
                        v[0]= CMP_DECODE_PLUS_IM_INSTRUCTION;
                        v[1]= CMP_DECODE_PLUS_IM_CONTROL;
                        v[2]= CMP_DECODE_PLUS_IM_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&!(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= CMP_DECODE_PLUS_S_INSTRUCTION;
                        v[1]= CMP_DECODE_PLUS_S_CONTROL;
                        v[2]= CMP_DECODE_PLUS_S_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= CMP_DECODE_PLUS_SR_INSTRUCTION;
                        v[1]= CMP_DECODE_PLUS_SR_CONTROL;
                        v[2]= CMP_DECODE_PLUS_SR_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else
                    {
                        v[0]= 0;
                        v[1]= 0;
                        v[2]= 0;
                        return 0;
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"eor"))
                {
                    if (instruction->staticInst->machInst & (1<<25))
                    {
                        v[0]= EOR_DECODE_PLUS_IM_INSTRUCTION;
                        v[1]= EOR_DECODE_PLUS_IM_CONTROL;
                        v[2]= EOR_DECODE_PLUS_IM_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&!(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= EOR_DECODE_PLUS_S_INSTRUCTION;
                        v[1]= EOR_DECODE_PLUS_S_CONTROL;
                        v[2]= EOR_DECODE_PLUS_S_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= EOR_DECODE_PLUS_SR_INSTRUCTION;
                        v[1]= EOR_DECODE_PLUS_SR_CONTROL;
                        v[2]= EOR_DECODE_PLUS_SR_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else
                    {
                        v[0]= 0;
                        v[1]= 0;
                        v[2]= 0;
                        return 0;
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,5,"ldmia"))
                {
			if ((instruction->staticInst->machInst & (1<<21))) 
                    	{
				v[0]= LDMIA_U_DECODE_PLUS_INSTRUCTION;
				v[1]= LDMIA_U_DECODE_PLUS_CONTROL;
				v[2]= LDMIA_U_DECODE_PLUS_DATA;
				return (v[0]+v[1]+v[2]);
			}
			else
			{
				v[0]= LDMIA_DECODE_PLUS_INSTRUCTION;
				v[1]= LDMIA_DECODE_PLUS_CONTROL;
				v[2]= LDMIA_DECODE_PLUS_DATA;
				return (v[0]+v[1]+v[2]);
			}
                }
		else if  (!instruction->staticInst->getName().compare(0,5,"ldmib"))
                {
			if ((instruction->staticInst->machInst & (1<<21))) 
                    	{
				v[0]= LDMIB_U_DECODE_PLUS_INSTRUCTION;
				v[1]= LDMIB_U_DECODE_PLUS_CONTROL;
				v[2]= LDMIB_U_DECODE_PLUS_DATA;
				return (v[0]+v[1]+v[2]);
			}
			else
			{
				v[0]= LDMIB_DECODE_PLUS_INSTRUCTION;
				v[1]= LDMIB_DECODE_PLUS_CONTROL;
				v[2]= LDMIB_DECODE_PLUS_DATA;
				return (v[0]+v[1]+v[2]);
			}
                }
		else if  (!instruction->staticInst->getName().compare(0,5,"ldmda"))
                {
			if ((instruction->staticInst->machInst & (1<<21))) 
                    	{
				v[0]= LDMDA_U_DECODE_PLUS_INSTRUCTION;
				v[1]= LDMDA_U_DECODE_PLUS_CONTROL;
				v[2]= LDMDA_U_DECODE_PLUS_DATA;
				return (v[0]+v[1]+v[2]);
			}
			else
			{
				v[0]= LDMDA_DECODE_PLUS_INSTRUCTION;
				v[1]= LDMDA_DECODE_PLUS_CONTROL;
				v[2]= LDMDA_DECODE_PLUS_DATA;
				return (v[0]+v[1]+v[2]);
			}
                }
		else if  (!instruction->staticInst->getName().compare(0,5,"ldmdb"))
                {
			if ((instruction->staticInst->machInst & (1<<21))) 
                    	{
				v[0]= LDMDB_U_DECODE_PLUS_INSTRUCTION;
				v[1]= LDMDB_U_DECODE_PLUS_CONTROL;
				v[2]= LDMDB_U_DECODE_PLUS_DATA;
				return (v[0]+v[1]+v[2]);
			}
			else
			{
				v[0]= LDMDB_DECODE_PLUS_INSTRUCTION;
				v[1]= LDMDB_DECODE_PLUS_CONTROL;
				v[2]= LDMDB_DECODE_PLUS_DATA;
				return (v[0]+v[1]+v[2]);
			}
                }
                else if  (!instruction->staticInst->getName().compare(0,4,"ldrb"))
                {
                    if (!(instruction->staticInst->machInst & (1<<25))) 
                    {
			if (!((instruction->staticInst->machInst & (1<<21))) && ((instruction->staticInst->machInst & (1<<24)))) 
			{
		                v[0]= LDRB_DECODE_PLUS_B_IM_INSTRUCTION;
		                v[1]= LDRB_DECODE_PLUS_B_IM_CONTROL;
		                v[2]= LDRB_DECODE_PLUS_B_IM_DATA;
		                return (v[0]+v[1]+v[2]);
			}
			else if (((instruction->staticInst->machInst & (1<<21))) && ((instruction->staticInst->machInst & (1<<24))))
			{
				v[0]= LDRB_DECODE_PLUS_BU_IM_INSTRUCTION;
		                v[1]= LDRB_DECODE_PLUS_BU_IM_CONTROL;
		                v[2]= LDRB_DECODE_PLUS_BU_IM_DATA;
		                return (v[0]+v[1]+v[2]);
			}
			else
			{
				v[0]= LDRB_DECODE_PLUS_A_IM_INSTRUCTION;
		                v[1]= LDRB_DECODE_PLUS_A_IM_CONTROL;
		                v[2]= LDRB_DECODE_PLUS_A_IM_DATA;
		                return (v[0]+v[1]+v[2]);
			}
                    }
                    else if ((instruction->staticInst->machInst & (1<<25))&& !(instruction->staticInst->machInst & (255<<4)))
                    {
                        if (!((instruction->staticInst->machInst & (1<<21))) && ((instruction->staticInst->machInst & (1<<24)))) 
			{
		                v[0]= LDRB_DECODE_PLUS_B_R_INSTRUCTION;
		                v[1]= LDRB_DECODE_PLUS_B_R_CONTROL;
		                v[2]= LDRB_DECODE_PLUS_B_R_DATA;
		                return (v[0]+v[1]+v[2]);
			}
			else if (((instruction->staticInst->machInst & (1<<21))) && ((instruction->staticInst->machInst & (1<<24))))
			{
				v[0]= LDRB_DECODE_PLUS_BU_R_INSTRUCTION;
		                v[1]= LDRB_DECODE_PLUS_BU_R_CONTROL;
		                v[2]= LDRB_DECODE_PLUS_BU_R_DATA;
		                return (v[0]+v[1]+v[2]);
			}
			else
			{
				v[0]= LDRB_DECODE_PLUS_A_R_INSTRUCTION;
		                v[1]= LDRB_DECODE_PLUS_A_R_CONTROL;
		                v[2]= LDRB_DECODE_PLUS_A_R_DATA;
		                return (v[0]+v[1]+v[2]);
			}
                    }
                    else 
                    {
                        if (!((instruction->staticInst->machInst & (1<<21))) && ((instruction->staticInst->machInst & (1<<24)))) 
			{
		                v[0]= LDRB_DECODE_PLUS_B_RS_INSTRUCTION;
		                v[1]= LDRB_DECODE_PLUS_B_RS_CONTROL;
		                v[2]= LDRB_DECODE_PLUS_B_RS_DATA;
		                return (v[0]+v[1]+v[2]);
			}
			else if (((instruction->staticInst->machInst & (1<<21))) && ((instruction->staticInst->machInst & (1<<24))))
			{
				v[0]= LDRB_DECODE_PLUS_BU_RS_INSTRUCTION;
		                v[1]= LDRB_DECODE_PLUS_BU_RS_CONTROL;
		                v[2]= LDRB_DECODE_PLUS_BU_RS_DATA;
		                return (v[0]+v[1]+v[2]);
			}
			else
			{
				v[0]= LDRB_DECODE_PLUS_A_RS_INSTRUCTION;
		                v[1]= LDRB_DECODE_PLUS_A_RS_CONTROL;
		                v[2]= LDRB_DECODE_PLUS_A_RS_DATA;
		                return (v[0]+v[1]+v[2]);
			}
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"ldr"))
                {
                    if (!(instruction->staticInst->machInst & (1<<25))) 
                    {
			if (!((instruction->staticInst->machInst & (1<<21))) && ((instruction->staticInst->machInst & (1<<24)))) 
			{
		                v[0]= LDR_DECODE_PLUS_B_IM_INSTRUCTION;
		                v[1]= LDR_DECODE_PLUS_B_IM_CONTROL;
		                v[2]= LDR_DECODE_PLUS_B_IM_DATA;
		                return (v[0]+v[1]+v[2]);
			}
			else if (((instruction->staticInst->machInst & (1<<21))) && ((instruction->staticInst->machInst & (1<<24))))
			{
				v[0]= LDR_DECODE_PLUS_BU_IM_INSTRUCTION;
		                v[1]= LDR_DECODE_PLUS_BU_IM_CONTROL;
		                v[2]= LDR_DECODE_PLUS_BU_IM_DATA;
		                return (v[0]+v[1]+v[2]);
			}
			else
			{
				v[0]= LDR_DECODE_PLUS_A_IM_INSTRUCTION;
		                v[1]= LDR_DECODE_PLUS_A_IM_CONTROL;
		                v[2]= LDR_DECODE_PLUS_A_IM_DATA;
		                return (v[0]+v[1]+v[2]);
			}
                    }
                    else if ((instruction->staticInst->machInst & (1<<25))&& !(instruction->staticInst->machInst & (255<<4)))
                    {
                        if (!((instruction->staticInst->machInst & (1<<21))) && ((instruction->staticInst->machInst & (1<<24)))) 
			{
		                v[0]= LDR_DECODE_PLUS_B_R_INSTRUCTION;
		                v[1]= LDR_DECODE_PLUS_B_R_CONTROL;
		                v[2]= LDR_DECODE_PLUS_B_R_DATA;
		                return (v[0]+v[1]+v[2]);
			}
			else if (((instruction->staticInst->machInst & (1<<21))) && ((instruction->staticInst->machInst & (1<<24))))
			{
				v[0]= LDR_DECODE_PLUS_BU_R_INSTRUCTION;
		                v[1]= LDR_DECODE_PLUS_BU_R_CONTROL;
		                v[2]= LDR_DECODE_PLUS_BU_R_DATA;
		                return (v[0]+v[1]+v[2]);
			}
			else
			{
				v[0]= LDR_DECODE_PLUS_A_R_INSTRUCTION;
		                v[1]= LDR_DECODE_PLUS_A_R_CONTROL;
		                v[2]= LDR_DECODE_PLUS_A_R_DATA;
		                return (v[0]+v[1]+v[2]);
			}
                    }
                    else 
                    {
                        if (!((instruction->staticInst->machInst & (1<<21))) && ((instruction->staticInst->machInst & (1<<24)))) 
			{
		                v[0]= LDR_DECODE_PLUS_B_RS_INSTRUCTION;
		                v[1]= LDR_DECODE_PLUS_B_RS_CONTROL;
		                v[2]= LDR_DECODE_PLUS_B_RS_DATA;
		                return (v[0]+v[1]+v[2]);
			}
			else if (((instruction->staticInst->machInst & (1<<21))) && ((instruction->staticInst->machInst & (1<<24))))
			{
				v[0]= LDR_DECODE_PLUS_BU_RS_INSTRUCTION;
		                v[1]= LDR_DECODE_PLUS_BU_RS_CONTROL;
		                v[2]= LDR_DECODE_PLUS_BU_RS_DATA;
		                return (v[0]+v[1]+v[2]);
			}
			else
			{
				v[0]= LDR_DECODE_PLUS_A_RS_INSTRUCTION;
		                v[1]= LDR_DECODE_PLUS_A_RS_CONTROL;
		                v[2]= LDR_DECODE_PLUS_A_RS_DATA;
		                return (v[0]+v[1]+v[2]);
			}
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"mcr"))
                {
                    v[0]= MCR_DECODE_PLUS_INSTRUCTION;
                    v[1]= MCR_DECODE_PLUS_CONTROL;
                    v[2]= MCR_DECODE_PLUS_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"mla"))
                {
                    v[0]= MLA_DECODE_PLUS_INSTRUCTION;
                    v[1]= MLA_DECODE_PLUS_CONTROL;
                    v[2]= MLA_DECODE_PLUS_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"mov"))
                {
                    if (instruction->staticInst->machInst & (1<<25))
                    {
                        v[0]= MOV_DECODE_PLUS_IM_INSTRUCTION;
                        v[1]= MOV_DECODE_PLUS_IM_CONTROL;
                        v[2]= MOV_DECODE_PLUS_IM_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&!(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= MOV_DECODE_PLUS_S_INSTRUCTION;
                        v[1]= MOV_DECODE_PLUS_S_CONTROL;
                        v[2]= MOV_DECODE_PLUS_S_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= MOV_DECODE_PLUS_SR_INSTRUCTION;
                        v[1]= MOV_DECODE_PLUS_SR_CONTROL;
                        v[2]= MOV_DECODE_PLUS_SR_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else
                    {
                        v[0]= 0;
                        v[1]= 0;
                        v[2]= 0;
                        return 0;
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"mrc"))
                {
                    v[0]= MRC_DECODE_PLUS_INSTRUCTION;
                    v[1]= MRC_DECODE_PLUS_CONTROL;
                    v[2]= MRC_DECODE_PLUS_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"mul"))
                {
                    v[0]= MUL_DECODE_PLUS_INSTRUCTION;
                    v[1]= MUL_DECODE_PLUS_CONTROL;
                    v[2]= MUL_DECODE_PLUS_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"mvn"))
                {
                    if (instruction->staticInst->machInst & (1<<25))
                    {
                        v[0]= MVN_DECODE_PLUS_IM_INSTRUCTION;
                        v[1]= MVN_DECODE_PLUS_IM_CONTROL;
                        v[2]= MVN_DECODE_PLUS_IM_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&!(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= MVN_DECODE_PLUS_S_INSTRUCTION;
                        v[1]= MVN_DECODE_PLUS_S_CONTROL;
                        v[2]= MVN_DECODE_PLUS_S_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= MVN_DECODE_PLUS_SR_INSTRUCTION;
                        v[1]= MVN_DECODE_PLUS_SR_CONTROL;
                        v[2]= MVN_DECODE_PLUS_SR_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else
                    {
                        v[0]= 0;
                        v[1]= 0;
                        v[2]= 0;
                        return 0;
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"orr"))
                {
                    if (instruction->staticInst->machInst & (1<<25))
                    {
                        v[0]= ORR_DECODE_PLUS_IM_INSTRUCTION;
                        v[1]= ORR_DECODE_PLUS_IM_CONTROL;
                        v[2]= ORR_DECODE_PLUS_IM_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&!(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= ORR_DECODE_PLUS_S_INSTRUCTION;
                        v[1]= ORR_DECODE_PLUS_S_CONTROL;
                        v[2]= ORR_DECODE_PLUS_S_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= ORR_DECODE_PLUS_SR_INSTRUCTION;
                        v[1]= ORR_DECODE_PLUS_SR_CONTROL;
                        v[2]= ORR_DECODE_PLUS_SR_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else
                    {
                        v[0]= 0;
                        v[1]= 0;
                        v[2]= 0;
                        return 0;
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"rsb"))
                {
                    if (instruction->staticInst->machInst & (1<<25))
                    {
                        v[0]= RSB_DECODE_PLUS_IM_INSTRUCTION;
                        v[1]= RSB_DECODE_PLUS_IM_CONTROL;
                        v[2]= RSB_DECODE_PLUS_IM_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&!(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= RSB_DECODE_PLUS_S_INSTRUCTION;
                        v[1]= RSB_DECODE_PLUS_S_CONTROL;
                        v[2]= RSB_DECODE_PLUS_S_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= RSB_DECODE_PLUS_SR_INSTRUCTION;
                        v[1]= RSB_DECODE_PLUS_SR_CONTROL;
                        v[2]= RSB_DECODE_PLUS_SR_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else
                    {
                        v[0]= 0;
                        v[1]= 0;
                        v[2]= 0;
                        return 0;
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"rsc"))
                {
                    if (instruction->staticInst->machInst & (1<<25))
                    {
                        v[0]= RSC_DECODE_PLUS_IM_INSTRUCTION;
                        v[1]= RSC_DECODE_PLUS_IM_CONTROL;
                        v[2]= RSC_DECODE_PLUS_IM_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&!(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= RSC_DECODE_PLUS_S_INSTRUCTION;
                        v[1]= RSC_DECODE_PLUS_S_CONTROL;
                        v[2]= RSC_DECODE_PLUS_S_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= RSC_DECODE_PLUS_SR_INSTRUCTION;
                        v[1]= RSC_DECODE_PLUS_SR_CONTROL;
                        v[2]= RSC_DECODE_PLUS_SR_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else
                    {
                        v[0]= 0;
                        v[1]= 0;
                        v[2]= 0;
                        return 0;
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,3, "sbc"))
                {
                    if (instruction->staticInst->machInst & (1<<25))
                    {
                        v[0]= SBC_DECODE_PLUS_IM_INSTRUCTION;
                        v[1]= SBC_DECODE_PLUS_IM_CONTROL;
                        v[2]= SBC_DECODE_PLUS_IM_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&!(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= SBC_DECODE_PLUS_S_INSTRUCTION;
                        v[1]= SBC_DECODE_PLUS_S_CONTROL;
                        v[2]= SBC_DECODE_PLUS_S_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= SBC_DECODE_PLUS_SR_INSTRUCTION;
                        v[1]= SBC_DECODE_PLUS_SR_CONTROL;
                        v[2]= SBC_DECODE_PLUS_SR_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else
                    {
                        v[0]= 0;
                        v[1]= 0;
                        v[2]= 0;
                        return 0;
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,5,"stmia"))
                {
			if ((instruction->staticInst->machInst & (1<<21))) 
                    	{
				v[0]= STMIA_U_DECODE_PLUS_INSTRUCTION;
				v[1]= STMIA_U_DECODE_PLUS_CONTROL;
				v[2]= STMIA_U_DECODE_PLUS_DATA;
				return (v[0]+v[1]+v[2]);
			}
			else
			{
				v[0]= STMIA_DECODE_PLUS_INSTRUCTION;
				v[1]= STMIA_DECODE_PLUS_CONTROL;
				v[2]= STMIA_DECODE_PLUS_DATA;
				return (v[0]+v[1]+v[2]);
			}
                }
		else if  (!instruction->staticInst->getName().compare(0,5,"stmib"))
                {
			if ((instruction->staticInst->machInst & (1<<21))) 
                    	{
				v[0]= STMIB_U_DECODE_PLUS_INSTRUCTION;
				v[1]= STMIB_U_DECODE_PLUS_CONTROL;
				v[2]= STMIB_U_DECODE_PLUS_DATA;
				return (v[0]+v[1]+v[2]);
			}
			else
			{
				v[0]= STMIB_DECODE_PLUS_INSTRUCTION;
				v[1]= STMIB_DECODE_PLUS_CONTROL;
				v[2]= STMIB_DECODE_PLUS_DATA;
				return (v[0]+v[1]+v[2]);
			}
                }
		else if  (!instruction->staticInst->getName().compare(0,5,"stmda"))
                {
			if ((instruction->staticInst->machInst & (1<<21))) 
                    	{
				v[0]= STMDA_U_DECODE_PLUS_INSTRUCTION;
				v[1]= STMDA_U_DECODE_PLUS_CONTROL;
				v[2]= STMDA_U_DECODE_PLUS_DATA;
				return (v[0]+v[1]+v[2]);
			}
			else
			{
				v[0]= STMDA_DECODE_PLUS_INSTRUCTION;
				v[1]= STMDA_DECODE_PLUS_CONTROL;
				v[2]= STMDA_DECODE_PLUS_DATA;
				return (v[0]+v[1]+v[2]);
			}
                }
		else if  (!instruction->staticInst->getName().compare(0,5,"stmdb"))
                {
			if ((instruction->staticInst->machInst & (1<<21))) 
                    	{
				v[0]= STMDB_U_DECODE_PLUS_INSTRUCTION;
				v[1]= STMDB_U_DECODE_PLUS_CONTROL;
				v[2]= STMDB_U_DECODE_PLUS_DATA;
				return (v[0]+v[1]+v[2]);
			}
			else
			{
				v[0]= STMDB_DECODE_PLUS_INSTRUCTION;
				v[1]= STMDB_DECODE_PLUS_CONTROL;
				v[2]= STMDB_DECODE_PLUS_DATA;
				return (v[0]+v[1]+v[2]);
			}
                }
                else if  (!instruction->staticInst->getName().compare(0,4,"strb"))
                {
                    if (!(instruction->staticInst->machInst & (1<<25))) 
                    {
			if (!((instruction->staticInst->machInst & (1<<21))) && ((instruction->staticInst->machInst & (1<<24)))) 
			{
		                v[0]= STRB_DECODE_PLUS_B_IM_INSTRUCTION;
		                v[1]= STRB_DECODE_PLUS_B_IM_CONTROL;
		                v[2]= STRB_DECODE_PLUS_B_IM_DATA;
		                return (v[0]+v[1]+v[2]);
			}
			else if (((instruction->staticInst->machInst & (1<<21))) && ((instruction->staticInst->machInst & (1<<24))))
			{
				v[0]= STRB_DECODE_PLUS_BU_IM_INSTRUCTION;
		                v[1]= STRB_DECODE_PLUS_BU_IM_CONTROL;
		                v[2]= STRB_DECODE_PLUS_BU_IM_DATA;
		                return (v[0]+v[1]+v[2]);
			}
			else
			{
				v[0]= STRB_DECODE_PLUS_A_IM_INSTRUCTION;
		                v[1]= STRB_DECODE_PLUS_A_IM_CONTROL;
		                v[2]= STRB_DECODE_PLUS_A_IM_DATA;
		                return (v[0]+v[1]+v[2]);
			}
                    }
                    else if ((instruction->staticInst->machInst & (1<<25))&& !(instruction->staticInst->machInst & (255<<4)))
                    {
                        if (!((instruction->staticInst->machInst & (1<<21))) && ((instruction->staticInst->machInst & (1<<24)))) 
			{
		                v[0]= STRB_DECODE_PLUS_B_R_INSTRUCTION;
		                v[1]= STRB_DECODE_PLUS_B_R_CONTROL;
		                v[2]= STRB_DECODE_PLUS_B_R_DATA;
		                return (v[0]+v[1]+v[2]);
			}
			else if (((instruction->staticInst->machInst & (1<<21))) && ((instruction->staticInst->machInst & (1<<24))))
			{
				v[0]= STRB_DECODE_PLUS_BU_R_INSTRUCTION;
		                v[1]= STRB_DECODE_PLUS_BU_R_CONTROL;
		                v[2]= STRB_DECODE_PLUS_BU_R_DATA;
		                return (v[0]+v[1]+v[2]);
			}
			else
			{
				v[0]= STRB_DECODE_PLUS_A_R_INSTRUCTION;
		                v[1]= STRB_DECODE_PLUS_A_R_CONTROL;
		                v[2]= STRB_DECODE_PLUS_A_R_DATA;
		                return (v[0]+v[1]+v[2]);
			}
                    }
                    else 
                    {
                        if (!((instruction->staticInst->machInst & (1<<21))) && ((instruction->staticInst->machInst & (1<<24)))) 
			{
		                v[0]= STRB_DECODE_PLUS_B_RS_INSTRUCTION;
		                v[1]= STRB_DECODE_PLUS_B_RS_CONTROL;
		                v[2]= STRB_DECODE_PLUS_B_RS_DATA;
		                return (v[0]+v[1]+v[2]);
			}
			else if (((instruction->staticInst->machInst & (1<<21))) && ((instruction->staticInst->machInst & (1<<24))))
			{
				v[0]= STRB_DECODE_PLUS_BU_RS_INSTRUCTION;
		                v[1]= STRB_DECODE_PLUS_BU_RS_CONTROL;
		                v[2]= STRB_DECODE_PLUS_BU_RS_DATA;
		                return (v[0]+v[1]+v[2]);
			}
			else
			{
				v[0]= STRB_DECODE_PLUS_A_RS_INSTRUCTION;
		                v[1]= STRB_DECODE_PLUS_A_RS_CONTROL;
		                v[2]= STRB_DECODE_PLUS_A_RS_DATA;
		                return (v[0]+v[1]+v[2]);
			}
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"str"))
                {
                    if (!(instruction->staticInst->machInst & (1<<25))) 
                    {
			if (!((instruction->staticInst->machInst & (1<<21))) && ((instruction->staticInst->machInst & (1<<24)))) 
			{
		                v[0]= STR_DECODE_PLUS_B_IM_INSTRUCTION;
		                v[1]= STR_DECODE_PLUS_B_IM_CONTROL;
		                v[2]= STR_DECODE_PLUS_B_IM_DATA;
		                return (v[0]+v[1]+v[2]);
			}
			else if (((instruction->staticInst->machInst & (1<<21))) && ((instruction->staticInst->machInst & (1<<24))))
			{
				v[0]= STR_DECODE_PLUS_BU_IM_INSTRUCTION;
		                v[1]= STR_DECODE_PLUS_BU_IM_CONTROL;
		                v[2]= STR_DECODE_PLUS_BU_IM_DATA;
		                return (v[0]+v[1]+v[2]);
			}
			else
			{
				v[0]= STR_DECODE_PLUS_A_IM_INSTRUCTION;
		                v[1]= STR_DECODE_PLUS_A_IM_CONTROL;
		                v[2]= STR_DECODE_PLUS_A_IM_DATA;
		                return (v[0]+v[1]+v[2]);
			}
                    }
                    else if ((instruction->staticInst->machInst & (1<<25))&& !(instruction->staticInst->machInst & (255<<4)))
                    {
                        if (!((instruction->staticInst->machInst & (1<<21))) && ((instruction->staticInst->machInst & (1<<24)))) 
			{
		                v[0]= STR_DECODE_PLUS_B_R_INSTRUCTION;
		                v[1]= STR_DECODE_PLUS_B_R_CONTROL;
		                v[2]= STR_DECODE_PLUS_B_R_DATA;
		                return (v[0]+v[1]+v[2]);
			}
			else if (((instruction->staticInst->machInst & (1<<21))) && ((instruction->staticInst->machInst & (1<<24))))
			{
				v[0]= STR_DECODE_PLUS_BU_R_INSTRUCTION;
		                v[1]= STR_DECODE_PLUS_BU_R_CONTROL;
		                v[2]= STR_DECODE_PLUS_BU_R_DATA;
		                return (v[0]+v[1]+v[2]);
			}
			else
			{
				v[0]= STR_DECODE_PLUS_A_R_INSTRUCTION;
		                v[1]= STR_DECODE_PLUS_A_R_CONTROL;
		                v[2]= STR_DECODE_PLUS_A_R_DATA;
		                return (v[0]+v[1]+v[2]);
			}
                    }
                    else 
                    {
                        if (!((instruction->staticInst->machInst & (1<<21))) && ((instruction->staticInst->machInst & (1<<24)))) 
			{
		                v[0]= STR_DECODE_PLUS_B_RS_INSTRUCTION;
		                v[1]= STR_DECODE_PLUS_B_RS_CONTROL;
		                v[2]= STR_DECODE_PLUS_B_RS_DATA;
		                return (v[0]+v[1]+v[2]);
			}
			else if (((instruction->staticInst->machInst & (1<<21))) && ((instruction->staticInst->machInst & (1<<24))))
			{
				v[0]= STR_DECODE_PLUS_BU_RS_INSTRUCTION;
		                v[1]= STR_DECODE_PLUS_BU_RS_CONTROL;
		                v[2]= STR_DECODE_PLUS_BU_RS_DATA;
		                return (v[0]+v[1]+v[2]);
			}
			else
			{
				v[0]= STR_DECODE_PLUS_A_RS_INSTRUCTION;
		                v[1]= STR_DECODE_PLUS_A_RS_CONTROL;
		                v[2]= STR_DECODE_PLUS_A_RS_DATA;
		                return (v[0]+v[1]+v[2]);
			}
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"sub"))
                {
                    if (instruction->staticInst->machInst & (1<<25))
                    {
                        v[0]= SUB_DECODE_PLUS_IM_INSTRUCTION;
                        v[1]= SUB_DECODE_PLUS_IM_CONTROL;
                        v[2]= SUB_DECODE_PLUS_IM_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&!(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= SUB_DECODE_PLUS_S_INSTRUCTION;
                        v[1]= SUB_DECODE_PLUS_S_CONTROL;
                        v[2]= SUB_DECODE_PLUS_S_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= SUB_DECODE_PLUS_SR_INSTRUCTION;
                        v[1]= SUB_DECODE_PLUS_SR_CONTROL;
                        v[2]= SUB_DECODE_PLUS_SR_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else
                    {
                        v[0]= 0;
                        v[1]= 0;
                        v[2]= 0;
                        return 0;
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"swi"))
                {
                    v[0]= SWI_DECODE_PLUS_INSTRUCTION;
                    v[1]= SWI_DECODE_PLUS_CONTROL;
                    v[2]= SWI_DECODE_PLUS_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,4,"swpb"))
                {
                    v[0]= SWPB_DECODE_PLUS_INSTRUCTION;
                    v[1]= SWPB_DECODE_PLUS_CONTROL;
                    v[2]= SWPB_DECODE_PLUS_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"swp"))
                {
                    v[0]= SWP_DECODE_PLUS_INSTRUCTION;
                    v[1]= SWP_DECODE_PLUS_CONTROL;
                    v[2]= SWP_DECODE_PLUS_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"teq"))
                {
                    if (instruction->staticInst->machInst & (1<<25))
                    {
                        v[0]= TEQ_DECODE_PLUS_IM_INSTRUCTION;
                        v[1]= TEQ_DECODE_PLUS_IM_CONTROL;
                        v[2]= TEQ_DECODE_PLUS_IM_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&!(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= TEQ_DECODE_PLUS_S_INSTRUCTION;
                        v[1]= TEQ_DECODE_PLUS_S_CONTROL;
                        v[2]= TEQ_DECODE_PLUS_S_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= TEQ_DECODE_PLUS_SR_INSTRUCTION;
                        v[1]= TEQ_DECODE_PLUS_SR_CONTROL;
                        v[2]= TEQ_DECODE_PLUS_SR_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else
                    {
                        v[0]= 0;
                        v[1]= 0;
                        v[2]= 0;
                        return 0;
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"tst"))
                {
                    if (instruction->staticInst->machInst & (1<<25))
                    {
                        v[0]= TST_DECODE_PLUS_IM_INSTRUCTION;
                        v[1]= TST_DECODE_PLUS_IM_CONTROL;
                        v[2]= TST_DECODE_PLUS_IM_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&!(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= TST_DECODE_PLUS_S_INSTRUCTION;
                        v[1]= TST_DECODE_PLUS_S_CONTROL;
                        v[2]= TST_DECODE_PLUS_S_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= TST_DECODE_PLUS_SR_INSTRUCTION;
                        v[1]= TST_DECODE_PLUS_SR_CONTROL;
                        v[2]= TST_DECODE_PLUS_SR_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else
                    {
                        v[0]= 0;
                        v[1]= 0;
                        v[2]= 0;
                        return 0;
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,4,"bkpt"))
                {
                    v[0]= BKPT_DECODE_PLUS_INSTRUCTION;
                    v[1]= BKPT_DECODE_PLUS_CONTROL;
                    v[2]= BKPT_DECODE_PLUS_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"blx"))
                {
                    v[0]= BLX_DECODE_PLUS_INSTRUCTION;
                    v[1]= BLX_DECODE_PLUS_CONTROL;
                    v[2]= BLX_DECODE_PLUS_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,2,"bx"))
                {
                    v[0]= BX_DECODE_PLUS_INSTRUCTION;
                    v[1]= BX_DECODE_PLUS_CONTROL;
                    v[2]= BX_DECODE_PLUS_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"clz"))
                {
                    v[0]= CLZ_DECODE_PLUS_INSTRUCTION;
                    v[1]= CLZ_DECODE_PLUS_CONTROL;
                    v[2]= CLZ_DECODE_PLUS_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"pld"))
                {
                    if ((instruction->staticInst->machInst & (1<<25))) 
                    {
                        v[0]= PLD_DECODE_PLUS_IM_INSTRUCTION;
                        v[1]= PLD_DECODE_PLUS_IM_CONTROL;
                        v[2]= PLD_DECODE_PLUS_IM_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&& !(instruction->staticInst->machInst & (255<<4)))
                    {
                        v[0]= PLD_DECODE_PLUS_R_INSTRUCTION;
                        v[1]= PLD_DECODE_PLUS_R_CONTROL;
                        v[2]= PLD_DECODE_PLUS_R_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&& (instruction->staticInst->machInst & (255<<4)))
                    {
                        v[0]= PLD_DECODE_PLUS_RS_INSTRUCTION;
                        v[1]= PLD_DECODE_PLUS_RS_CONTROL;
                        v[2]= PLD_DECODE_PLUS_RS_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else
                    {
                        v[0]= 0;
                        v[1]= 0;
                        v[2]= 0;
                        return 0;
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,4,"qadd"))
                {    
                    if (instruction->staticInst->machInst & (1<<25))
                    {
                        v[0]= QADD_DECODE_PLUS_IM_INSTRUCTION;
                        v[1]= QADD_DECODE_PLUS_IM_CONTROL;
                        v[2]= QADD_DECODE_PLUS_IM_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&!(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= QADD_DECODE_PLUS_S_INSTRUCTION;
                        v[1]= QADD_DECODE_PLUS_S_CONTROL;
                        v[2]= QADD_DECODE_PLUS_S_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= QADD_DECODE_PLUS_SR_INSTRUCTION;
                        v[1]= QADD_DECODE_PLUS_SR_CONTROL;
                        v[2]= QADD_DECODE_PLUS_SR_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else
                    {
                        v[0]= 0;
                        v[1]= 0;
                        v[2]= 0;
                        return 0;
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,4,"qsub"))
                {
                    if (instruction->staticInst->machInst & (1<<25))
                    {
                        v[0]= QSUB_DECODE_PLUS_IM_INSTRUCTION;
                        v[1]= QSUB_DECODE_PLUS_IM_CONTROL;
                        v[2]= QSUB_DECODE_PLUS_IM_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&!(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= QSUB_DECODE_PLUS_S_INSTRUCTION;
                        v[1]= QSUB_DECODE_PLUS_S_CONTROL;
                        v[2]= QSUB_DECODE_PLUS_S_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= QSUB_DECODE_PLUS_SR_INSTRUCTION;
                        v[1]= QSUB_DECODE_PLUS_SR_CONTROL;
                        v[2]= QSUB_DECODE_PLUS_SR_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else
                    {
                        v[0]= 0;
                        v[1]= 0;
                        v[2]= 0;
                        return 0;
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,5,"qdadd"))
                {    
                    if (instruction->staticInst->machInst & (1<<25))
                    {
                        v[0]= QDADD_DECODE_PLUS_IM_INSTRUCTION;
                        v[1]= QDADD_DECODE_PLUS_IM_CONTROL;
                        v[2]= QDADD_DECODE_PLUS_IM_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&!(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= QDADD_DECODE_PLUS_S_INSTRUCTION;
                        v[1]= QDADD_DECODE_PLUS_S_CONTROL;
                        v[2]= QDADD_DECODE_PLUS_S_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= QDADD_DECODE_PLUS_SR_INSTRUCTION;
                        v[1]= QDADD_DECODE_PLUS_SR_CONTROL;
                        v[2]= QDADD_DECODE_PLUS_SR_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else
                    {
                        v[0]= 0;
                        v[1]= 0;
                        v[2]= 0;
                        return 0;
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,5,"qdsub"))
                {
                    if (instruction->staticInst->machInst & (1<<25))
                    {
                        v[0]= QDSUB_DECODE_PLUS_IM_INSTRUCTION;
                        v[1]= QDSUB_DECODE_PLUS_IM_CONTROL;
                        v[2]= QDSUB_DECODE_PLUS_IM_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&!(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= QDSUB_DECODE_PLUS_S_INSTRUCTION;
                        v[1]= QDSUB_DECODE_PLUS_S_CONTROL;
                        v[2]= QDSUB_DECODE_PLUS_S_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= QDSUB_DECODE_PLUS_SR_INSTRUCTION;
                        v[1]= QDSUB_DECODE_PLUS_SR_CONTROL;
                        v[2]= QDSUB_DECODE_PLUS_SR_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else
                    {
                        v[0]= 0;
                        v[1]= 0;
                        v[2]= 0;
                        return 0;
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,6,"smlaxy"))
                {
                    v[0]= SMLAXY_DECODE_PLUS_INSTRUCTION;
                    v[1]= SMLAXY_DECODE_PLUS_CONTROL;
                    v[2]= SMLAXY_DECODE_PLUS_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,6,"smlawy"))
                {
                    v[0]= SMLAWY_DECODE_PLUS_INSTRUCTION;
                    v[1]= SMLAWY_DECODE_PLUS_CONTROL;
                    v[2]= SMLAWY_DECODE_PLUS_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,5,"smulwy"))
                {
                    v[0]= SMULWY_DECODE_PLUS_INSTRUCTION;
                    v[1]= SMULWY_DECODE_PLUS_CONTROL;
                    v[2]= SMULWY_DECODE_PLUS_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,7,"smlalxy"))
                {
                    v[0]= SMLALXY_DECODE_PLUS_INSTRUCTION;
                    v[1]= SMLALXY_DECODE_PLUS_CONTROL;
                    v[2]= SMLALXY_DECODE_PLUS_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,6,"smulxy"))
                {
                    v[0]= SMULXY_DECODE_PLUS_INSTRUCTION;
                    v[1]= SMULXY_DECODE_PLUS_CONTROL;
                    v[2]= SMULXY_DECODE_PLUS_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,5,"smlal"))
                {
                    v[0]= SMLAL_DECODE_PLUS_INSTRUCTION;
                    v[1]= SMLAL_DECODE_PLUS_CONTROL;
                    v[2]= SMLAL_DECODE_PLUS_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,5,"smull"))
                {
                    v[0]= SMULL_DECODE_PLUS_INSTRUCTION;
                    v[1]= SMULL_DECODE_PLUS_CONTROL;
                    v[2]= SMULL_DECODE_PLUS_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,5,"umlal"))
                {
                    v[0]= UMLAL_DECODE_PLUS_INSTRUCTION;
                    v[1]= UMLAL_DECODE_PLUS_CONTROL;
                    v[2]= UMLAL_DECODE_PLUS_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,5,"umull"))
                {
                    v[0]= UMULL_DECODE_PLUS_INSTRUCTION;
                    v[1]= UMULL_DECODE_PLUS_CONTROL;
                    v[2]= UMULL_DECODE_PLUS_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"dmb"))
                {
                    v[0]= DMB_DECODE_PLUS_INSTRUCTION;
                    v[1]= DMB_DECODE_PLUS_CONTROL;
                    v[2]= DMB_DECODE_PLUS_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,6,"uopReg"))
                {
                    if (instruction->staticInst->machInst & (1<<25))
                    {
                        v[0]= UOPREG_DECODE_PLUS_IM_INSTRUCTION;
                        v[1]= UOPREG_DECODE_PLUS_IM_CONTROL;
                        v[2]= UOPREG_DECODE_PLUS_IM_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&!(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= UOPREG_DECODE_PLUS_S_INSTRUCTION;
                        v[1]= UOPREG_DECODE_PLUS_S_CONTROL;
                        v[2]= UOPREG_DECODE_PLUS_S_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= UOPREG_DECODE_PLUS_SR_INSTRUCTION;
                        v[1]= UOPREG_DECODE_PLUS_SR_CONTROL;
                        v[2]= UOPREG_DECODE_PLUS_SR_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else
                    {
                        v[0]= 0;
                        v[1]= 0;
                        v[2]= 0;
                        return 0;
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,4,"vmrs"))
                {
                    v[0]= VMRS_DECODE_PLUS_INSTRUCTION;
                    v[1]= VMRS_DECODE_PLUS_CONTROL;
                    v[2]= VMRS_DECODE_PLUS_DATA;
                    return (v[0]+v[1]+v[2]); 
                }
                else if  (!instruction->staticInst->getName().compare(0,4,"vmsr"))
                {
                    v[0]= VMSR_DECODE_PLUS_INSTRUCTION;
                    v[1]= VMSR_DECODE_PLUS_CONTROL;
                    v[2]= VMSR_DECODE_PLUS_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else
                {
                    v[0]= 0;
                    v[1]= 0;
                    v[2]= 0;
                    return 0;
                }
            }
            else if (Stage == STAGE_EXECUTE)
            {
                if  (!instruction->staticInst->getName().compare(0,3,"adc"))
                {
                    if (instruction->staticInst->machInst & (1<<25))
                    {
                        v[0]= ADC_EXECUTE_IMM_INSTRUCTION;
                        v[1]= ADC_EXECUTE_IMM_CONTROL;
                        v[2]= ADC_EXECUTE_IMM_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&!(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= ADC_EXECUTE_SHIFT_INSTRUCTION;
                        v[1]= ADC_EXECUTE_SHIFT_CONTROL;
                        v[2]= ADC_EXECUTE_SHIFT_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= ADC_EXECUTE_SHIFTREG_INSTRUCTION;
                        v[1]= ADC_EXECUTE_SHIFTREG_CONTROL;
                        v[2]= ADC_EXECUTE_SHIFTREG_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else
                    {
                        v[0]= 0;
                        v[1]= 0;
                        v[2]= 0;
                        return 0;
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"add"))
                {    
                    if (instruction->staticInst->machInst & (1<<25))
                    {
                        v[0]= ADD_EXECUTE_IMM_INSTRUCTION;
                        v[1]= ADD_EXECUTE_IMM_CONTROL;
                        v[2]= ADD_EXECUTE_IMM_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&!(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= ADD_EXECUTE_SHIFT_INSTRUCTION;
                        v[1]= ADD_EXECUTE_SHIFT_CONTROL;
                        v[2]= ADD_EXECUTE_SHIFT_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= ADD_EXECUTE_SHIFTREG_INSTRUCTION;
                        v[1]= ADD_EXECUTE_SHIFTREG_CONTROL;
                        v[2]= ADD_EXECUTE_SHIFTREG_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else
                    {
                        v[0]= 0;
                        v[1]= 0;
                        v[2]= 0;
                        return 0;
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"and"))
                {
                    if (instruction->staticInst->machInst & (1<<25))
                    {
                        v[0]= AND_EXECUTE_IMM_INSTRUCTION;
                        v[1]= AND_EXECUTE_IMM_CONTROL;
                        v[2]= AND_EXECUTE_IMM_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&!(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= AND_EXECUTE_SHIFT_INSTRUCTION;
                        v[1]= AND_EXECUTE_SHIFT_CONTROL;
                        v[2]= AND_EXECUTE_SHIFT_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= AND_EXECUTE_SHIFTREG_INSTRUCTION;
                        v[1]= AND_EXECUTE_SHIFTREG_CONTROL;
                        v[2]= AND_EXECUTE_SHIFTREG_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else
                    {
                        v[0]= 0;
                        v[1]= 0;
                        v[2]= 0;
                        return 0;
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"b"))
                {
                    v[0]= B_EXECUTE_INSTRUCTION;
                    v[1]= B_EXECUTE_CONTROL;
                    v[2]= B_EXECUTE_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"bic"))
                {
                    if (instruction->staticInst->machInst & (1<<25))
                    {
                        v[0]= BIC_EXECUTE_IMM_INSTRUCTION;
                        v[1]= BIC_EXECUTE_IMM_CONTROL;
                        v[2]= BIC_EXECUTE_IMM_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&!(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= BIC_EXECUTE_SHIFT_INSTRUCTION;
                        v[1]= BIC_EXECUTE_SHIFT_CONTROL;
                        v[2]= BIC_EXECUTE_SHIFT_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= BIC_EXECUTE_SHIFTREG_INSTRUCTION;
                        v[1]= BIC_EXECUTE_SHIFTREG_CONTROL;
                        v[2]= BIC_EXECUTE_SHIFTREG_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else
                    {
                        v[0]= 0;
                        v[1]= 0;
                        v[2]= 0;
                        return 0;
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"bl"))
                {
                    v[0]= BL_EXECUTE_INSTRUCTION;
                    v[1]= BL_EXECUTE_CONTROL;
                    v[2]= BL_EXECUTE_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"cmn"))
                {
                    if (instruction->staticInst->machInst & (1<<25))
                    {
                        v[0]= CMN_EXECUTE_IMM_INSTRUCTION;
                        v[1]= CMN_EXECUTE_IMM_CONTROL;
                        v[2]= CMN_EXECUTE_IMM_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&!(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= CMN_EXECUTE_SHIFT_INSTRUCTION;
                        v[1]= CMN_EXECUTE_SHIFT_CONTROL;
                        v[2]= CMN_EXECUTE_SHIFT_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= CMN_EXECUTE_SHIFTREG_INSTRUCTION;
                        v[1]= CMN_EXECUTE_SHIFTREG_CONTROL;
                        v[2]= CMN_EXECUTE_SHIFTREG_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else
                    {
                        v[0]= 0;
                        v[1]= 0;
                        v[2]= 0;
                        return 0;
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"cmp"))
                {
                    if (instruction->staticInst->machInst & (1<<25))
                    {
                        v[0]= CMP_EXECUTE_IMM_INSTRUCTION;
                        v[1]= CMP_EXECUTE_IMM_CONTROL;
                        v[2]= CMP_EXECUTE_IMM_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&!(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= CMP_EXECUTE_SHIFT_INSTRUCTION;
                        v[1]= CMP_EXECUTE_SHIFT_CONTROL;
                        v[2]= CMP_EXECUTE_SHIFT_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= CMP_EXECUTE_SHIFTREG_INSTRUCTION;
                        v[1]= CMP_EXECUTE_SHIFTREG_CONTROL;
                        v[2]= CMP_EXECUTE_SHIFTREG_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else
                    {
                        v[0]= 0;
                        v[1]= 0;
                        v[2]= 0;
                        return 0;
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"eor"))
                {
                    if (instruction->staticInst->machInst & (1<<25))
                    {
                        v[0]= EOR_EXECUTE_IMM_INSTRUCTION;
                        v[1]= EOR_EXECUTE_IMM_CONTROL;
                        v[2]= EOR_EXECUTE_IMM_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&!(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= EOR_EXECUTE_SHIFT_INSTRUCTION;
                        v[1]= EOR_EXECUTE_SHIFT_CONTROL;
                        v[2]= EOR_EXECUTE_SHIFT_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= EOR_EXECUTE_SHIFTREG_INSTRUCTION;
                        v[1]= EOR_EXECUTE_SHIFTREG_CONTROL;
                        v[2]= EOR_EXECUTE_SHIFTREG_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else
                    {
                        v[0]= 0;
                        v[1]= 0;
                        v[2]= 0;
                        return 0;
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,5,"ldmia"))
                {
			if ((instruction->staticInst->machInst & (1<<21))) 
                    	{
				v[0]= LDMIA_U_EXECUTE_INSTRUCTION;
				v[1]= LDMIA_U_EXECUTE_CONTROL;
				v[2]= LDMIA_U_EXECUTE_DATA;
				return (v[0]+v[1]+v[2]);
			}
			else
			{
				v[0]= LDMIA_EXECUTE_INSTRUCTION;
				v[1]= LDMIA_EXECUTE_CONTROL;
				v[2]= LDMIA_EXECUTE_DATA;
				return (v[0]+v[1]+v[2]);
			}
                }
		else if  (!instruction->staticInst->getName().compare(0,5,"ldmib"))
                {
			if ((instruction->staticInst->machInst & (1<<21))) 
                    	{
				v[0]= LDMIB_U_EXECUTE_INSTRUCTION;
				v[1]= LDMIB_U_EXECUTE_CONTROL;
				v[2]= LDMIB_U_EXECUTE_DATA;
				return (v[0]+v[1]+v[2]);
			}
			else
			{
				v[0]= LDMIB_EXECUTE_INSTRUCTION;
				v[1]= LDMIB_EXECUTE_CONTROL;
				v[2]= LDMIB_EXECUTE_DATA;
				return (v[0]+v[1]+v[2]);
			}
                }
		else if  (!instruction->staticInst->getName().compare(0,5,"ldmda"))
                {
			if ((instruction->staticInst->machInst & (1<<21))) 
                    	{
				v[0]= LDMDA_U_EXECUTE_INSTRUCTION;
				v[1]= LDMDA_U_EXECUTE_CONTROL;
				v[2]= LDMDA_U_EXECUTE_DATA;
				return (v[0]+v[1]+v[2]);
			}
			else
			{
				v[0]= LDMDA_EXECUTE_INSTRUCTION;
				v[1]= LDMDA_EXECUTE_CONTROL;
				v[2]= LDMDA_EXECUTE_DATA;
				return (v[0]+v[1]+v[2]);
			}
                }
		else if  (!instruction->staticInst->getName().compare(0,5,"ldmdb"))
                {
			if ((instruction->staticInst->machInst & (1<<21))) 
                    	{
				v[0]= LDMDB_U_EXECUTE_INSTRUCTION;
				v[1]= LDMDB_U_EXECUTE_CONTROL;
				v[2]= LDMDB_U_EXECUTE_DATA;
				return (v[0]+v[1]+v[2]);
			}
			else
			{
				v[0]= LDMDB_EXECUTE_INSTRUCTION;
				v[1]= LDMDB_EXECUTE_CONTROL;
				v[2]= LDMDB_EXECUTE_DATA;
				return (v[0]+v[1]+v[2]);
			}
                }
                else if  (!instruction->staticInst->getName().compare(0,4,"ldrb"))
                {
                    if (!(instruction->staticInst->machInst & (1<<25))) 
                    {
			if (!((instruction->staticInst->machInst & (1<<21))) && ((instruction->staticInst->machInst & (1<<24)))) 
			{
		                v[0]= LDRB_EXECUTE_B_IMM_INSTRUCTION;
		                v[1]= LDRB_EXECUTE_B_IMM_CONTROL;
		                v[2]= LDRB_EXECUTE_B_IMM_DATA;
		                return (v[0]+v[1]+v[2]);
			}
			else if (((instruction->staticInst->machInst & (1<<21))) && ((instruction->staticInst->machInst & (1<<24))))
			{
				v[0]= LDRB_EXECUTE_BU_IMM_INSTRUCTION;
		                v[1]= LDRB_EXECUTE_BU_IMM_CONTROL;
		                v[2]= LDRB_EXECUTE_BU_IMM_DATA;
		                return (v[0]+v[1]+v[2]);
			}
			else
			{
				v[0]= LDRB_EXECUTE_A_IMM_INSTRUCTION;
		                v[1]= LDRB_EXECUTE_A_IMM_CONTROL;
		                v[2]= LDRB_EXECUTE_A_IMM_DATA;
		                return (v[0]+v[1]+v[2]);
			}
                    }
                    else if ((instruction->staticInst->machInst & (1<<25))&& !(instruction->staticInst->machInst & (255<<4)))
                    {
                        if (!((instruction->staticInst->machInst & (1<<21))) && ((instruction->staticInst->machInst & (1<<24)))) 
			{
		                v[0]= LDRB_EXECUTE_B_REG_INSTRUCTION;
		                v[1]= LDRB_EXECUTE_B_REG_CONTROL;
		                v[2]= LDRB_EXECUTE_B_REG_DATA;
		                return (v[0]+v[1]+v[2]);
			}
			else if (((instruction->staticInst->machInst & (1<<21))) && ((instruction->staticInst->machInst & (1<<24))))
			{
				v[0]= LDRB_EXECUTE_BU_REG_INSTRUCTION;
		                v[1]= LDRB_EXECUTE_BU_REG_CONTROL;
		                v[2]= LDRB_EXECUTE_BU_REG_DATA;
		                return (v[0]+v[1]+v[2]);
			}
			else
			{
				v[0]= LDRB_EXECUTE_A_REG_INSTRUCTION;
		                v[1]= LDRB_EXECUTE_A_REG_CONTROL;
		                v[2]= LDRB_EXECUTE_A_REG_DATA;
		                return (v[0]+v[1]+v[2]);
			}
                    }
                    else 
                    {
                        if (!((instruction->staticInst->machInst & (1<<21))) && ((instruction->staticInst->machInst & (1<<24)))) 
			{
		                v[0]= LDRB_EXECUTE_B_SHIFTREG_INSTRUCTION;
		                v[1]= LDRB_EXECUTE_B_SHIFTREG_CONTROL;
		                v[2]= LDRB_EXECUTE_B_SHIFTREG_DATA;
		                return (v[0]+v[1]+v[2]);
			}
			else if (((instruction->staticInst->machInst & (1<<21))) && ((instruction->staticInst->machInst & (1<<24))))
			{
				v[0]= LDRB_EXECUTE_BU_SHIFTREG_INSTRUCTION;
		                v[1]= LDRB_EXECUTE_BU_SHIFTREG_CONTROL;
		                v[2]= LDRB_EXECUTE_BU_SHIFTREG_DATA;
		                return (v[0]+v[1]+v[2]);
			}
			else
			{
				v[0]= LDRB_EXECUTE_A_SHIFTREG_INSTRUCTION;
		                v[1]= LDRB_EXECUTE_A_SHIFTREG_CONTROL;
		                v[2]= LDRB_EXECUTE_A_SHIFTREG_DATA;
		                return (v[0]+v[1]+v[2]);
			}
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"ldr"))
                {
                    if (!(instruction->staticInst->machInst & (1<<25))) 
                    {
			if (!((instruction->staticInst->machInst & (1<<21))) && ((instruction->staticInst->machInst & (1<<24)))) 
			{
		                v[0]= LDR_EXECUTE_B_IMM_INSTRUCTION;
		                v[1]= LDR_EXECUTE_B_IMM_CONTROL;
		                v[2]= LDR_EXECUTE_B_IMM_DATA;
		                return (v[0]+v[1]+v[2]);
			}
			else if (((instruction->staticInst->machInst & (1<<21))) && ((instruction->staticInst->machInst & (1<<24))))
			{
				v[0]= LDR_EXECUTE_BU_IMM_INSTRUCTION;
		                v[1]= LDR_EXECUTE_BU_IMM_CONTROL;
		                v[2]= LDR_EXECUTE_BU_IMM_DATA;
		                return (v[0]+v[1]+v[2]);
			}
			else
			{
				v[0]= LDR_EXECUTE_A_IMM_INSTRUCTION;
		                v[1]= LDR_EXECUTE_A_IMM_CONTROL;
		                v[2]= LDR_EXECUTE_A_IMM_DATA;
		                return (v[0]+v[1]+v[2]);
			}
                    }
                    else if ((instruction->staticInst->machInst & (1<<25))&& !(instruction->staticInst->machInst & (255<<4)))
                    {
                        if (!((instruction->staticInst->machInst & (1<<21))) && ((instruction->staticInst->machInst & (1<<24)))) 
			{
		                v[0]= LDR_EXECUTE_B_REG_INSTRUCTION;
		                v[1]= LDR_EXECUTE_B_REG_CONTROL;
		                v[2]= LDR_EXECUTE_B_REG_DATA;
		                return (v[0]+v[1]+v[2]);
			}
			else if (((instruction->staticInst->machInst & (1<<21))) && ((instruction->staticInst->machInst & (1<<24))))
			{
				v[0]= LDR_EXECUTE_BU_REG_INSTRUCTION;
		                v[1]= LDR_EXECUTE_BU_REG_CONTROL;
		                v[2]= LDR_EXECUTE_BU_REG_DATA;
		                return (v[0]+v[1]+v[2]);
			}
			else
			{
				v[0]= LDR_EXECUTE_A_REG_INSTRUCTION;
		                v[1]= LDR_EXECUTE_A_REG_CONTROL;
		                v[2]= LDR_EXECUTE_A_REG_DATA;
		                return (v[0]+v[1]+v[2]);
			}
                    }
                    else 
                    {
                        if (!((instruction->staticInst->machInst & (1<<21))) && ((instruction->staticInst->machInst & (1<<24)))) 
			{
		                v[0]= LDR_EXECUTE_B_SHIFTREG_INSTRUCTION;
		                v[1]= LDR_EXECUTE_B_SHIFTREG_CONTROL;
		                v[2]= LDR_EXECUTE_B_SHIFTREG_DATA;
		                return (v[0]+v[1]+v[2]);
			}
			else if (((instruction->staticInst->machInst & (1<<21))) && ((instruction->staticInst->machInst & (1<<24))))
			{
				v[0]= LDR_EXECUTE_BU_SHIFTREG_INSTRUCTION;
		                v[1]= LDR_EXECUTE_BU_SHIFTREG_CONTROL;
		                v[2]= LDR_EXECUTE_BU_SHIFTREG_DATA;
		                return (v[0]+v[1]+v[2]);
			}
			else
			{
				v[0]= LDR_EXECUTE_A_SHIFTREG_INSTRUCTION;
		                v[1]= LDR_EXECUTE_A_SHIFTREG_CONTROL;
		                v[2]= LDR_EXECUTE_A_SHIFTREG_DATA;
		                return (v[0]+v[1]+v[2]);
			}
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"mcr"))
                {
                    v[0]= MCR_EXECUTE_INSTRUCTION;
                    v[1]= MCR_EXECUTE_CONTROL;
                    v[2]= MCR_EXECUTE_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"mla"))
                {
                    v[0]= MLA_EXECUTE_INSTRUCTION;
                    v[1]= MLA_EXECUTE_CONTROL;
                    v[2]= MLA_EXECUTE_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"mov"))
                {
                    if (instruction->staticInst->machInst & (1<<25))
                    {
                        v[0]= MOV_EXECUTE_IMM_INSTRUCTION;
                        v[1]= MOV_EXECUTE_IMM_CONTROL;
                        v[2]= MOV_EXECUTE_IMM_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&!(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= MOV_EXECUTE_SHIFT_INSTRUCTION;
                        v[1]= MOV_EXECUTE_SHIFT_CONTROL;
                        v[2]= MOV_EXECUTE_SHIFT_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= MOV_EXECUTE_SHIFTREG_INSTRUCTION;
                        v[1]= MOV_EXECUTE_SHIFTREG_CONTROL;
                        v[2]= MOV_EXECUTE_SHIFTREG_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else
                    {
                        v[0]= 0;
                        v[1]= 0;
                        v[2]= 0;
                        return 0;
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"mrc"))
                {
                    v[0]= MRC_EXECUTE_INSTRUCTION;
                    v[1]= MRC_EXECUTE_CONTROL;
                    v[2]= MRC_EXECUTE_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"mul"))
                {
                    v[0]= MUL_EXECUTE_INSTRUCTION;
                    v[1]= MUL_EXECUTE_CONTROL;
                    v[2]= MUL_EXECUTE_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"mvn"))
                {
                    if (instruction->staticInst->machInst & (1<<25))
                    {
                        v[0]= MVN_EXECUTE_IMM_INSTRUCTION;
                        v[1]= MVN_EXECUTE_IMM_CONTROL;
                        v[2]= MVN_EXECUTE_IMM_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&!(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= MVN_EXECUTE_SHIFT_INSTRUCTION;
                        v[1]= MVN_EXECUTE_SHIFT_CONTROL;
                        v[2]= MVN_EXECUTE_SHIFT_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= MVN_EXECUTE_SHIFTREG_INSTRUCTION;
                        v[1]= MVN_EXECUTE_SHIFTREG_CONTROL;
                        v[2]= MVN_EXECUTE_SHIFTREG_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else
                    {
                        v[0]= 0;
                        v[1]= 0;
                        v[2]= 0;
                        return 0;
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"orr"))
                {
                    if (instruction->staticInst->machInst & (1<<25))
                    {
                        v[0]= ORR_EXECUTE_IMM_INSTRUCTION;
                        v[1]= ORR_EXECUTE_IMM_CONTROL;
                        v[2]= ORR_EXECUTE_IMM_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&!(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= ORR_EXECUTE_SHIFT_INSTRUCTION;
                        v[1]= ORR_EXECUTE_SHIFT_CONTROL;
                        v[2]= ORR_EXECUTE_SHIFT_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= ORR_EXECUTE_SHIFTREG_INSTRUCTION;
                        v[1]= ORR_EXECUTE_SHIFTREG_CONTROL;
                        v[2]= ORR_EXECUTE_SHIFTREG_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else
                    {
                        v[0]= 0;
                        v[1]= 0;
                        v[2]= 0;
                        return 0;
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"rsb"))
                {
                    if (instruction->staticInst->machInst & (1<<25))
                    {
                        v[0]= RSB_EXECUTE_IMM_INSTRUCTION;
                        v[1]= RSB_EXECUTE_IMM_CONTROL;
                        v[2]= RSB_EXECUTE_IMM_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&!(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= RSB_EXECUTE_SHIFT_INSTRUCTION;
                        v[1]= RSB_EXECUTE_SHIFT_CONTROL;
                        v[2]= RSB_EXECUTE_SHIFT_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= RSB_EXECUTE_SHIFTREG_INSTRUCTION;
                        v[1]= RSB_EXECUTE_SHIFTREG_CONTROL;
                        v[2]= RSB_EXECUTE_SHIFTREG_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else
                    {
                        v[0]= 0;
                        v[1]= 0;
                        v[2]= 0;
                        return 0;
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"rsc"))
                {
                    if (instruction->staticInst->machInst & (1<<25))
                    {
                        v[0]= RSC_EXECUTE_IMM_INSTRUCTION;
                        v[1]= RSC_EXECUTE_IMM_CONTROL;
                        v[2]= RSC_EXECUTE_IMM_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&!(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= RSC_EXECUTE_SHIFT_INSTRUCTION;
                        v[1]= RSC_EXECUTE_SHIFT_CONTROL;
                        v[2]= RSC_EXECUTE_SHIFT_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= RSC_EXECUTE_SHIFTREG_INSTRUCTION;
                        v[1]= RSC_EXECUTE_SHIFTREG_CONTROL;
                        v[2]= RSC_EXECUTE_SHIFTREG_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else
                    {
                        v[0]= 0;
                        v[1]= 0;
                        v[2]= 0;
                        return 0;
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,3, "sbc"))
                {
                    if (instruction->staticInst->machInst & (1<<25))
                    {
                        v[0]= SBC_EXECUTE_IMM_INSTRUCTION;
                        v[1]= SBC_EXECUTE_IMM_CONTROL;
                        v[2]= SBC_EXECUTE_IMM_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&!(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= SBC_EXECUTE_SHIFT_INSTRUCTION;
                        v[1]= SBC_EXECUTE_SHIFT_CONTROL;
                        v[2]= SBC_EXECUTE_SHIFT_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= SBC_EXECUTE_SHIFTREG_INSTRUCTION;
                        v[1]= SBC_EXECUTE_SHIFTREG_CONTROL;
                        v[2]= SBC_EXECUTE_SHIFTREG_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else
                    {
                        v[0]= 0;
                        v[1]= 0;
                        v[2]= 0;
                        return 0;
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,5,"stmia"))
                {
			if ((instruction->staticInst->machInst & (1<<21))) 
                    	{
				v[0]= STMIA_U_EXECUTE_INSTRUCTION;
				v[1]= STMIA_U_EXECUTE_CONTROL;
				v[2]= STMIA_U_EXECUTE_DATA;
				return (v[0]+v[1]+v[2]);
			}
			else
			{
				v[0]= STMIA_EXECUTE_INSTRUCTION;
				v[1]= STMIA_EXECUTE_CONTROL;
				v[2]= STMIA_EXECUTE_DATA;
				return (v[0]+v[1]+v[2]);
			}
                }
		else if  (!instruction->staticInst->getName().compare(0,5,"stmib"))
                {
			if ((instruction->staticInst->machInst & (1<<21))) 
                    	{
				v[0]= STMIB_U_EXECUTE_INSTRUCTION;
				v[1]= STMIB_U_EXECUTE_CONTROL;
				v[2]= STMIB_U_EXECUTE_DATA;
				return (v[0]+v[1]+v[2]);
			}
			else
			{
				v[0]= STMIB_EXECUTE_INSTRUCTION;
				v[1]= STMIB_EXECUTE_CONTROL;
				v[2]= STMIB_EXECUTE_DATA;
				return (v[0]+v[1]+v[2]);
			}
                }
		else if  (!instruction->staticInst->getName().compare(0,5,"stmda"))
                {
			if ((instruction->staticInst->machInst & (1<<21))) 
                    	{
				v[0]= STMDA_U_EXECUTE_INSTRUCTION;
				v[1]= STMDA_U_EXECUTE_CONTROL;
				v[2]= STMDA_U_EXECUTE_DATA;
				return (v[0]+v[1]+v[2]);
			}
			else
			{
				v[0]= STMDA_EXECUTE_INSTRUCTION;
				v[1]= STMDA_EXECUTE_CONTROL;
				v[2]= STMDA_EXECUTE_DATA;
				return (v[0]+v[1]+v[2]);
			}
                }
		else if  (!instruction->staticInst->getName().compare(0,5,"stmdb"))
                {
			if ((instruction->staticInst->machInst & (1<<21))) 
                    	{
				v[0]= STMDB_U_EXECUTE_INSTRUCTION;
				v[1]= STMDB_U_EXECUTE_CONTROL;
				v[2]= STMDB_U_EXECUTE_DATA;
				return (v[0]+v[1]+v[2]);
			}
			else
			{
				v[0]= STMDB_EXECUTE_INSTRUCTION;
				v[1]= STMDB_EXECUTE_CONTROL;
				v[2]= STMDB_EXECUTE_DATA;
				return (v[0]+v[1]+v[2]);
			}
                }
                else if  (!instruction->staticInst->getName().compare(0,4,"strb"))
                {
                    if (!(instruction->staticInst->machInst & (1<<25))) 
                    {
			if (!((instruction->staticInst->machInst & (1<<21))) && ((instruction->staticInst->machInst & (1<<24)))) 
			{
		                v[0]= STRB_EXECUTE_B_IMM_INSTRUCTION;
		                v[1]= STRB_EXECUTE_B_IMM_CONTROL;
		                v[2]= STRB_EXECUTE_B_IMM_DATA;
		                return (v[0]+v[1]+v[2]);
			}
			else if (((instruction->staticInst->machInst & (1<<21))) && ((instruction->staticInst->machInst & (1<<24))))
			{
				v[0]= STRB_EXECUTE_BU_IMM_INSTRUCTION;
		                v[1]= STRB_EXECUTE_BU_IMM_CONTROL;
		                v[2]= STRB_EXECUTE_BU_IMM_DATA;
		                return (v[0]+v[1]+v[2]);
			}
			else
			{
				v[0]= STRB_EXECUTE_A_IMM_INSTRUCTION;
		                v[1]= STRB_EXECUTE_A_IMM_CONTROL;
		                v[2]= STRB_EXECUTE_A_IMM_DATA;
		                return (v[0]+v[1]+v[2]);
			}
                    }
                    else if ((instruction->staticInst->machInst & (1<<25))&& !(instruction->staticInst->machInst & (255<<4)))
                    {
                        if (!((instruction->staticInst->machInst & (1<<21))) && ((instruction->staticInst->machInst & (1<<24)))) 
			{
		                v[0]= STRB_EXECUTE_B_REG_INSTRUCTION;
		                v[1]= STRB_EXECUTE_B_REG_CONTROL;
		                v[2]= STRB_EXECUTE_B_REG_DATA;
		                return (v[0]+v[1]+v[2]);
			}
			else if (((instruction->staticInst->machInst & (1<<21))) && ((instruction->staticInst->machInst & (1<<24))))
			{
				v[0]= STRB_EXECUTE_BU_REG_INSTRUCTION;
		                v[1]= STRB_EXECUTE_BU_REG_CONTROL;
		                v[2]= STRB_EXECUTE_BU_REG_DATA;
		                return (v[0]+v[1]+v[2]);
			}
			else
			{
				v[0]= STRB_EXECUTE_A_REG_INSTRUCTION;
		                v[1]= STRB_EXECUTE_A_REG_CONTROL;
		                v[2]= STRB_EXECUTE_A_REG_DATA;
		                return (v[0]+v[1]+v[2]);
			}
                    }
                    else 
                    {
                        if (!((instruction->staticInst->machInst & (1<<21))) && ((instruction->staticInst->machInst & (1<<24)))) 
			{
		                v[0]= STRB_EXECUTE_B_SHIFTREG_INSTRUCTION;
		                v[1]= STRB_EXECUTE_B_SHIFTREG_CONTROL;
		                v[2]= STRB_EXECUTE_B_SHIFTREG_DATA;
		                return (v[0]+v[1]+v[2]);
			}
			else if (((instruction->staticInst->machInst & (1<<21))) && ((instruction->staticInst->machInst & (1<<24))))
			{
				v[0]= STRB_EXECUTE_BU_SHIFTREG_INSTRUCTION;
		                v[1]= STRB_EXECUTE_BU_SHIFTREG_CONTROL;
		                v[2]= STRB_EXECUTE_BU_SHIFTREG_DATA;
		                return (v[0]+v[1]+v[2]);
			}
			else
			{
				v[0]= STRB_EXECUTE_A_SHIFTREG_INSTRUCTION;
		                v[1]= STRB_EXECUTE_A_SHIFTREG_CONTROL;
		                v[2]= STRB_EXECUTE_A_SHIFTREG_DATA;
		                return (v[0]+v[1]+v[2]);
			}
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"str"))
                {
                    if (!(instruction->staticInst->machInst & (1<<25))) 
                    {
			if (!((instruction->staticInst->machInst & (1<<21))) && ((instruction->staticInst->machInst & (1<<24)))) 
			{
		                v[0]= STR_EXECUTE_B_IMM_INSTRUCTION;
		                v[1]= STR_EXECUTE_B_IMM_CONTROL;
		                v[2]= STR_EXECUTE_B_IMM_DATA;
		                return (v[0]+v[1]+v[2]);
			}
			else if (((instruction->staticInst->machInst & (1<<21))) && ((instruction->staticInst->machInst & (1<<24))))
			{
				v[0]= STR_EXECUTE_BU_IMM_INSTRUCTION;
		                v[1]= STR_EXECUTE_BU_IMM_CONTROL;
		                v[2]= STR_EXECUTE_BU_IMM_DATA;
		                return (v[0]+v[1]+v[2]);
			}
			else
			{
				v[0]= STR_EXECUTE_A_IMM_INSTRUCTION;
		                v[1]= STR_EXECUTE_A_IMM_CONTROL;
		                v[2]= STR_EXECUTE_A_IMM_DATA;
		                return (v[0]+v[1]+v[2]);
			}
                    }
                    else if ((instruction->staticInst->machInst & (1<<25))&& !(instruction->staticInst->machInst & (255<<4)))
                    {
                        if (!((instruction->staticInst->machInst & (1<<21))) && ((instruction->staticInst->machInst & (1<<24)))) 
			{
		                v[0]= STR_EXECUTE_B_REG_INSTRUCTION;
		                v[1]= STR_EXECUTE_B_REG_CONTROL;
		                v[2]= STR_EXECUTE_B_REG_DATA;
		                return (v[0]+v[1]+v[2]);
			}
			else if (((instruction->staticInst->machInst & (1<<21))) && ((instruction->staticInst->machInst & (1<<24))))
			{
				v[0]= STR_EXECUTE_BU_REG_INSTRUCTION;
		                v[1]= STR_EXECUTE_BU_REG_CONTROL;
		                v[2]= STR_EXECUTE_BU_REG_DATA;
		                return (v[0]+v[1]+v[2]);
			}
			else
			{
				v[0]= STR_EXECUTE_A_REG_INSTRUCTION;
		                v[1]= STR_EXECUTE_A_REG_CONTROL;
		                v[2]= STR_EXECUTE_A_REG_DATA;
		                return (v[0]+v[1]+v[2]);
			}
                    }
                    else 
                    {
                        if (!((instruction->staticInst->machInst & (1<<21))) && ((instruction->staticInst->machInst & (1<<24)))) 
			{
		                v[0]= STR_EXECUTE_B_SHIFTREG_INSTRUCTION;
		                v[1]= STR_EXECUTE_B_SHIFTREG_CONTROL;
		                v[2]= STR_EXECUTE_B_SHIFTREG_DATA;
		                return (v[0]+v[1]+v[2]);
			}
			else if (((instruction->staticInst->machInst & (1<<21))) && ((instruction->staticInst->machInst & (1<<24))))
			{
				v[0]= STR_EXECUTE_BU_SHIFTREG_INSTRUCTION;
		                v[1]= STR_EXECUTE_BU_SHIFTREG_CONTROL;
		                v[2]= STR_EXECUTE_BU_SHIFTREG_DATA;
		                return (v[0]+v[1]+v[2]);
			}
			else
			{
				v[0]= STR_EXECUTE_A_SHIFTREG_INSTRUCTION;
		                v[1]= STR_EXECUTE_A_SHIFTREG_CONTROL;
		                v[2]= STR_EXECUTE_A_SHIFTREG_DATA;
		                return (v[0]+v[1]+v[2]);
			}
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"sub"))
                {
                    if (instruction->staticInst->machInst & (1<<25))
                    {
                        v[0]= SUB_EXECUTE_IMM_INSTRUCTION;
                        v[1]= SUB_EXECUTE_IMM_CONTROL;
                        v[2]= SUB_EXECUTE_IMM_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&!(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= SUB_EXECUTE_SHIFT_INSTRUCTION;
                        v[1]= SUB_EXECUTE_SHIFT_CONTROL;
                        v[2]= SUB_EXECUTE_SHIFT_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= SUB_EXECUTE_SHIFTREG_INSTRUCTION;
                        v[1]= SUB_EXECUTE_SHIFTREG_CONTROL;
                        v[2]= SUB_EXECUTE_SHIFTREG_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else
                    {
                        v[0]= 0;
                        v[1]= 0;
                        v[2]= 0;
                        return 0;
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"swi"))
                {
                    v[0]= SWI_EXECUTE_INSTRUCTION;
                    v[1]= SWI_EXECUTE_CONTROL;
                    v[2]= SWI_EXECUTE_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,4,"swpb"))
                {
                    v[0]= SWPB_EXECUTE_INSTRUCTION;
                    v[1]= SWPB_EXECUTE_CONTROL;
                    v[2]= SWPB_EXECUTE_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"swp"))
                {
                    v[0]= SWP_EXECUTE_INSTRUCTION;
                    v[1]= SWP_EXECUTE_CONTROL;
                    v[2]= SWP_EXECUTE_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"teq"))
                {
                    if (instruction->staticInst->machInst & (1<<25))
                    {
                        v[0]= TEQ_EXECUTE_IMM_INSTRUCTION;
                        v[1]= TEQ_EXECUTE_IMM_CONTROL;
                        v[2]= TEQ_EXECUTE_IMM_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&!(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= TEQ_EXECUTE_SHIFT_INSTRUCTION;
                        v[1]= TEQ_EXECUTE_SHIFT_CONTROL;
                        v[2]= TEQ_EXECUTE_SHIFT_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= TEQ_EXECUTE_SHIFTREG_INSTRUCTION;
                        v[1]= TEQ_EXECUTE_SHIFTREG_CONTROL;
                        v[2]= TEQ_EXECUTE_SHIFTREG_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else
                    {
                        v[0]= 0;
                        v[1]= 0;
                        v[2]= 0;
                        return 0;
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"tst"))
                {
                    if (instruction->staticInst->machInst & (1<<25))
                    {
                        v[0]= TST_EXECUTE_IMM_INSTRUCTION;
                        v[1]= TST_EXECUTE_IMM_CONTROL;
                        v[2]= TST_EXECUTE_IMM_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&!(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= TST_EXECUTE_SHIFT_INSTRUCTION;
                        v[1]= TST_EXECUTE_SHIFT_CONTROL;
                        v[2]= TST_EXECUTE_SHIFT_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= TST_EXECUTE_SHIFTREG_INSTRUCTION;
                        v[1]= TST_EXECUTE_SHIFTREG_CONTROL;
                        v[2]= TST_EXECUTE_SHIFTREG_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else
                    {
                        v[0]= 0;
                        v[1]= 0;
                        v[2]= 0;
                        return 0;
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,4,"bkpt"))
                {
                    v[0]= BKPT_EXECUTE_INSTRUCTION;
                    v[1]= BKPT_EXECUTE_CONTROL;
                    v[2]= BKPT_EXECUTE_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"blx"))
                {
                    v[0]= BLX_EXECUTE_INSTRUCTION;
                    v[1]= BLX_EXECUTE_CONTROL;
                    v[2]= BLX_EXECUTE_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,2,"bx"))
                {
                    v[0]= BX_EXECUTE_INSTRUCTION;
                    v[1]= BX_EXECUTE_CONTROL;
                    v[2]= BX_EXECUTE_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"clz"))
                {
                    v[0]= CLZ_EXECUTE_INSTRUCTION;
                    v[1]= CLZ_EXECUTE_CONTROL;
                    v[2]= CLZ_EXECUTE_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"pld"))
                {
                    if ((instruction->staticInst->machInst & (1<<25))) 
                    {
                        v[0]= PLD_EXECUTE_IMM_INSTRUCTION;
                        v[1]= PLD_EXECUTE_IMM_CONTROL;
                        v[2]= PLD_EXECUTE_IMM_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&& !(instruction->staticInst->machInst & (255<<4)))
                    {
                        v[0]= PLD_EXECUTE_REG_INSTRUCTION;
                        v[1]= PLD_EXECUTE_REG_CONTROL;
                        v[2]= PLD_EXECUTE_REG_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&& (instruction->staticInst->machInst & (255<<4)))
                    {
                        v[0]= PLD_EXECUTE_SHIFTREG_INSTRUCTION;
                        v[1]= PLD_EXECUTE_SHIFTREG_CONTROL;
                        v[2]= PLD_EXECUTE_SHIFTREG_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else
                    {
                        v[0]= 0;
                        v[1]= 0;
                        v[2]= 0;
                        return 0;
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,4,"qadd"))
                {    
                    if (instruction->staticInst->machInst & (1<<25))
                    {
                        v[0]= QADD_EXECUTE_IMM_INSTRUCTION;
                        v[1]= QADD_EXECUTE_IMM_CONTROL;
                        v[2]= QADD_EXECUTE_IMM_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&!(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= QADD_EXECUTE_SHIFT_INSTRUCTION;
                        v[1]= QADD_EXECUTE_SHIFT_CONTROL;
                        v[2]= QADD_EXECUTE_SHIFT_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= QADD_EXECUTE_SHIFTREG_INSTRUCTION;
                        v[1]= QADD_EXECUTE_SHIFTREG_CONTROL;
                        v[2]= QADD_EXECUTE_SHIFTREG_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else
                    {
                        v[0]= 0;
                        v[1]= 0;
                        v[2]= 0;
                        return 0;
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,4,"qsub"))
                {
                    if (instruction->staticInst->machInst & (1<<25))
                    {
                        v[0]= QSUB_EXECUTE_IMM_INSTRUCTION;
                        v[1]= QSUB_EXECUTE_IMM_CONTROL;
                        v[2]= QSUB_EXECUTE_IMM_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&!(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= QSUB_EXECUTE_SHIFT_INSTRUCTION;
                        v[1]= QSUB_EXECUTE_SHIFT_CONTROL;
                        v[2]= QSUB_EXECUTE_SHIFT_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= QSUB_EXECUTE_SHIFTREG_INSTRUCTION;
                        v[1]= QSUB_EXECUTE_SHIFTREG_CONTROL;
                        v[2]= QSUB_EXECUTE_SHIFTREG_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else
                    {
                        v[0]= 0;
                        v[1]= 0;
                        v[2]= 0;
                        return 0;
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,5,"qdadd"))
                {    
                    if (instruction->staticInst->machInst & (1<<25))
                    {
                        v[0]= QDADD_EXECUTE_IMM_INSTRUCTION;
                        v[1]= QDADD_EXECUTE_IMM_CONTROL;
                        v[2]= QDADD_EXECUTE_IMM_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&!(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= QDADD_EXECUTE_SHIFT_INSTRUCTION;
                        v[1]= QDADD_EXECUTE_SHIFT_CONTROL;
                        v[2]= QDADD_EXECUTE_SHIFT_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= QDADD_EXECUTE_SHIFTREG_INSTRUCTION;
                        v[1]= QDADD_EXECUTE_SHIFTREG_CONTROL;
                        v[2]= QDADD_EXECUTE_SHIFTREG_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else
                    {
                        v[0]= 0;
                        v[1]= 0;
                        v[2]= 0;
                        return 0;
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,5,"qdsub"))
                {
                    if (instruction->staticInst->machInst & (1<<25))
                    {
                        v[0]= QDSUB_EXECUTE_IMM_INSTRUCTION;
                        v[1]= QDSUB_EXECUTE_IMM_CONTROL;
                        v[2]= QDSUB_EXECUTE_IMM_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&!(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= QDSUB_EXECUTE_SHIFT_INSTRUCTION;
                        v[1]= QDSUB_EXECUTE_SHIFT_CONTROL;
                        v[2]= QDSUB_EXECUTE_SHIFT_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= QDSUB_EXECUTE_SHIFTREG_INSTRUCTION;
                        v[1]= QDSUB_EXECUTE_SHIFTREG_CONTROL;
                        v[2]= QDSUB_EXECUTE_SHIFTREG_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else
                    {
                        v[0]= 0;
                        v[1]= 0;
                        v[2]= 0;
                        return 0;
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,6,"smlaxy"))
                {
                    v[0]= SMLAXY_EXECUTE_INSTRUCTION;
                    v[1]= SMLAXY_EXECUTE_CONTROL;
                    v[2]= SMLAXY_EXECUTE_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,6,"smlawy"))
                {
                    v[0]= SMLAWY_EXECUTE_INSTRUCTION;
                    v[1]= SMLAWY_EXECUTE_CONTROL;
                    v[2]= SMLAWY_EXECUTE_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,5,"smulwy"))
                {
                    v[0]= SMULWY_EXECUTE_INSTRUCTION;
                    v[1]= SMULWY_EXECUTE_CONTROL;
                    v[2]= SMULWY_EXECUTE_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,7,"smlalxy"))
                {
                    v[0]= SMLALXY_EXECUTE_INSTRUCTION;
                    v[1]= SMLALXY_EXECUTE_CONTROL;
                    v[2]= SMLALXY_EXECUTE_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,6,"smulxy"))
                {
                    v[0]= SMULXY_EXECUTE_INSTRUCTION;
                    v[1]= SMULXY_EXECUTE_CONTROL;
                    v[2]= SMULXY_EXECUTE_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,5,"smlal"))
                {
                    v[0]= SMLAL_EXECUTE_INSTRUCTION;
                    v[1]= SMLAL_EXECUTE_CONTROL;
                    v[2]= SMLAL_EXECUTE_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,5,"smull"))
                {
                    v[0]= SMULL_EXECUTE_INSTRUCTION;
                    v[1]= SMULL_EXECUTE_CONTROL;
                    v[2]= SMULL_EXECUTE_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,5,"umlal"))
                {
                    v[0]= UMLAL_EXECUTE_INSTRUCTION;
                    v[1]= UMLAL_EXECUTE_CONTROL;
                    v[2]= UMLAL_EXECUTE_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,5,"umull"))
                {
                    v[0]= UMULL_EXECUTE_INSTRUCTION;
                    v[1]= UMULL_EXECUTE_CONTROL;
                    v[2]= UMULL_EXECUTE_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"dmb"))
                {
                    v[0]= DMB_EXECUTE_INSTRUCTION;
                    v[1]= DMB_EXECUTE_CONTROL;
                    v[2]= DMB_EXECUTE_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,6,"uopReg"))
                {
                    if (instruction->staticInst->machInst & (1<<25))
                    {
                        v[0]= UOPREG_EXECUTE_IMM_INSTRUCTION;
                        v[1]= UOPREG_EXECUTE_IMM_CONTROL;
                        v[2]= UOPREG_EXECUTE_IMM_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&!(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= UOPREG_EXECUTE_SHIFT_INSTRUCTION;
                        v[1]= UOPREG_EXECUTE_SHIFT_CONTROL;
                        v[2]= UOPREG_EXECUTE_SHIFT_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else if (!(instruction->staticInst->machInst & (1<<25))&&(instruction->staticInst->machInst & (1<<4)))
                    {
                        v[0]= UOPREG_EXECUTE_SHIFTREG_INSTRUCTION;
                        v[1]= UOPREG_EXECUTE_SHIFTREG_CONTROL;
                        v[2]= UOPREG_EXECUTE_SHIFTREG_DATA;
                        return (v[0]+v[1]+v[2]);
                    }
                    else
                    {
                        v[0]= 0;
                        v[1]= 0;
                        v[2]= 0;
                        return 0;
                    }
                }
                else if  (!instruction->staticInst->getName().compare(0,4,"vmrs"))
                {
                    v[0]= VMRS_EXECUTE_INSTRUCTION;
                    v[1]= VMRS_EXECUTE_CONTROL;
                    v[2]= VMRS_EXECUTE_DATA;
                    return (v[0]+v[1]+v[2]); 
                }
                else if  (!instruction->staticInst->getName().compare(0,4,"vmsr"))
                {
                    v[0]= VMSR_EXECUTE_INSTRUCTION;
                    v[1]= VMSR_EXECUTE_CONTROL;
                    v[2]= VMSR_EXECUTE_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else
                {
                    v[0]= 0;
                    v[1]= 0;
                    v[2]= 0;
                    return 0;
                }
            }
            else if (Stage == STAGE_MEM)
            {
                if  (!instruction->staticInst->getName().compare(0,3,"adc"))
                {
                    v[0]= ADC_MEM_INSTRUCTION;
                    v[1]= ADC_MEM_CONTROL;
                    v[2]= ADC_MEM_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"add"))
                {
                    v[0]= ADD_MEM_INSTRUCTION;
                    v[1]= ADD_MEM_CONTROL;
                    v[2]= ADD_MEM_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"and"))
                {
                    v[0]= AND_MEM_INSTRUCTION;
                    v[1]= AND_MEM_CONTROL;
                    v[2]= AND_MEM_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"b"))
                {
                    v[0]= B_MEM_INSTRUCTION;
                    v[1]= B_MEM_CONTROL;
                    v[2]= B_MEM_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"bic"))
                {
                    v[0]= BIC_MEM_INSTRUCTION;
                    v[1]= BIC_MEM_CONTROL;
                    v[2]= BIC_MEM_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"bl"))
                {
                    v[0]= BL_MEM_INSTRUCTION;
                    v[1]= BL_MEM_CONTROL;
                    v[2]= BL_MEM_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"cmn"))
                {
                    v[0]= CMN_MEM_INSTRUCTION;
                    v[1]= CMN_MEM_CONTROL;
                    v[2]= CMN_MEM_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"cmp"))
                {
                    v[0]= CMP_MEM_INSTRUCTION;
                    v[1]= CMP_MEM_CONTROL;
                    v[2]= CMP_MEM_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"eor"))
                {
                    v[0]= EOR_MEM_INSTRUCTION;
                    v[1]= EOR_MEM_CONTROL;
                    v[2]= EOR_MEM_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"ldm"))
                {
                    v[0]= LDM_MEM_INSTRUCTION;
                    v[1]= LDM_MEM_CONTROL;
                    v[2]= LDM_MEM_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,4,"ldrb"))
                {
                    v[0]= LDRB_MEM_INSTRUCTION;
                    v[1]= LDRB_MEM_CONTROL;
                    v[2]= LDRB_MEM_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"ldr"))
                {
                    v[0]= LDR_MEM_INSTRUCTION;
                    v[1]= LDR_MEM_CONTROL;
                    v[2]= LDR_MEM_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"mcr"))
                {
                    v[0]= MCR_MEM_INSTRUCTION;
                    v[1]= MCR_MEM_CONTROL;
                    v[2]= MCR_MEM_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"mla"))
                {
                    v[0]= MLA_MEM_INSTRUCTION;
                    v[1]= MLA_MEM_CONTROL;
                    v[2]= MLA_MEM_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"mov"))
                {
                    v[0]= MOV_MEM_INSTRUCTION;
                    v[1]= MOV_MEM_CONTROL;
                    v[2]= MOV_MEM_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"mrc"))
                {
                    v[0]= MRC_MEM_INSTRUCTION;
                    v[1]= MRC_MEM_CONTROL;
                    v[2]= MRC_MEM_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"mul"))
                {
                    v[0]= MUL_MEM_INSTRUCTION;
                    v[1]= MUL_MEM_CONTROL;
                    v[2]= MUL_MEM_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"mvn"))
                {
                    v[0]= MVN_MEM_INSTRUCTION;
                    v[1]= MVN_MEM_CONTROL;
                    v[2]= MVN_MEM_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"orr"))
                {
                    v[0]= ORR_MEM_INSTRUCTION;
                    v[1]= ORR_MEM_CONTROL;
                    v[2]= ORR_MEM_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"rsb"))
                {
                    v[0]= RSB_MEM_INSTRUCTION;
                    v[1]= RSB_MEM_CONTROL;
                    v[2]= RSB_MEM_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"rsc"))
                {
                    v[0]= RSC_MEM_INSTRUCTION;
                    v[1]= RSC_MEM_CONTROL;
                    v[2]= RSC_MEM_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3, "sbc"))
                {
                    v[0]= SBC_MEM_INSTRUCTION;
                    v[1]= SBC_MEM_CONTROL;
                    v[2]= SBC_MEM_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"stm"))
                {
                    v[0]= STM_MEM_INSTRUCTION;
                    v[1]= STM_MEM_CONTROL;
                    v[2]= STM_MEM_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,4,"strb"))
                {
                    v[0]= STRB_MEM_INSTRUCTION;
                    v[1]= STRB_MEM_CONTROL;
                    v[2]= STRB_MEM_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"str"))
                {
                    v[0]= STR_MEM_INSTRUCTION;
                    v[1]= STR_MEM_CONTROL;
                    v[2]= STR_MEM_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"sub"))
                {
                    v[0]= SUB_MEM_INSTRUCTION;
                    v[1]= SUB_MEM_CONTROL;
                    v[2]= SUB_MEM_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"swi"))
                {
                    v[0]= SWI_MEM_INSTRUCTION;
                    v[1]= SWI_MEM_CONTROL;
                    v[2]= SWI_MEM_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,4,"swpb"))
                {
                    v[0]= SWPB_MEM_INSTRUCTION;
                    v[1]= SWPB_MEM_CONTROL;
                    v[2]= SWPB_MEM_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"swp"))
                {
                    v[0]= SWP_MEM_INSTRUCTION;
                    v[1]= SWP_MEM_CONTROL;
                    v[2]= SWP_MEM_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"teq"))
                {
                    v[0]= TEQ_MEM_INSTRUCTION;
                    v[1]= TEQ_MEM_CONTROL;
                    v[2]= TEQ_MEM_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"tst"))
                {
                    v[0]= TST_MEM_INSTRUCTION;
                    v[1]= TST_MEM_CONTROL;
                    v[2]= TST_MEM_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,4,"bkpt"))
                {
                    v[0]= BKPT_MEM_INSTRUCTION;
                    v[1]= BKPT_MEM_CONTROL;
                    v[2]= BKPT_MEM_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"blx"))
                {
                    v[0]= BLX_MEM_INSTRUCTION;
                    v[1]= BLX_MEM_CONTROL;
                    v[2]= BLX_MEM_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,2,"bx"))
                {
                    v[0]= BX_MEM_INSTRUCTION;
                    v[1]= BX_MEM_CONTROL;
                    v[2]= BX_MEM_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"clz"))
                {
                    v[0]= CLZ_MEM_INSTRUCTION;
                    v[1]= CLZ_MEM_CONTROL;
                    v[2]= CLZ_MEM_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"pld"))
                {
                    v[0]= PLD_MEM_INSTRUCTION;
                    v[1]= PLD_MEM_CONTROL;
                    v[2]= PLD_MEM_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,4,"qadd"))
                {
                    v[0]= QADD_MEM_INSTRUCTION;
                    v[1]= QADD_MEM_CONTROL;
                    v[2]= QADD_MEM_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,4,"qsub"))
                {
                    v[0]= QSUB_MEM_INSTRUCTION;
                    v[1]= QSUB_MEM_CONTROL;
                    v[2]= QSUB_MEM_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,5,"qdadd"))
                {
                    v[0]= QDADD_MEM_INSTRUCTION;
                    v[1]= QDADD_MEM_CONTROL;
                    v[2]= QDADD_MEM_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,5,"qdsub"))
                {
                    v[0]= QDSUB_MEM_INSTRUCTION;
                    v[1]= QDSUB_MEM_CONTROL;
                    v[2]= QDSUB_MEM_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,6,"smlaxy"))
                {
                    v[0]= SMLAXY_MEM_INSTRUCTION;
                    v[1]= SMLAXY_MEM_CONTROL;
                    v[2]= SMLAXY_MEM_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,7,"smlalxy"))
                {
                    v[0]= SMLALXY_MEM_INSTRUCTION;
                    v[1]= SMLALXY_MEM_CONTROL;
                    v[2]= SMLALXY_MEM_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,6,"smulxy"))
                {
                    v[0]= SMULXY_MEM_INSTRUCTION;
                    v[1]= SMULXY_MEM_CONTROL;
                    v[2]= SMULXY_MEM_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,6,"smlawy"))
                {
                    v[0]= SMLAWY_MEM_INSTRUCTION;
                    v[1]= SMLAWY_MEM_CONTROL;
                    v[2]= SMLAWY_MEM_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,6,"smulwy"))
                {
                    v[0]= SMULWY_MEM_INSTRUCTION;
                    v[1]= SMULWY_MEM_CONTROL;
                    v[2]= SMULWY_MEM_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,5,"smlal"))
                {
                    v[0]= SMLAL_MEM_INSTRUCTION;
                    v[1]= SMLAL_MEM_CONTROL;
                    v[2]= SMLAL_MEM_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,5,"smull"))
                {
                    v[0]= SMULL_MEM_INSTRUCTION;
                    v[1]= SMULL_MEM_CONTROL;
                    v[2]= SMULL_MEM_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,5,"umlal"))
                {
                    v[0]= UMLAL_MEM_INSTRUCTION;
                    v[1]= UMLAL_MEM_CONTROL;
                    v[2]= UMLAL_MEM_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,5,"umull"))
                {
                    v[0]= UMULL_MEM_INSTRUCTION;
                    v[1]= UMULL_MEM_CONTROL;
                    v[2]= UMULL_MEM_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"dmb"))
                {
                    v[0]= DMB_MEM_INSTRUCTION;
                    v[1]= DMB_MEM_CONTROL;
                    v[2]= DMB_MEM_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,6,"uopReg"))
                {
                    v[0]= UOPREG_MEM_INSTRUCTION;
                    v[1]= UOPREG_MEM_CONTROL;
                    v[2]= UOPREG_MEM_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,4,"vmrs"))
                {
                    v[0]= VMRS_MEM_INSTRUCTION;
                    v[1]= VMRS_MEM_CONTROL;
                    v[2]= VMRS_MEM_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,4,"vmsr"))
                {
                    v[0]= VMSR_MEM_INSTRUCTION;
                    v[1]= VMSR_MEM_CONTROL;
                    v[2]= VMSR_MEM_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else
                {
                    v[0]= 0;
                    v[1]= 0;
                    v[2]= 0;
                    return 0;
                }
            }
            else if (Stage == STAGE_WB)
            {

                if  (!instruction->staticInst->getName().compare(0,3,"adc"))
                {
                    v[0]= ADC_WB_INSTRUCTION;
                    v[1]= ADC_WB_CONTROL;
                    v[2]= ADC_WB_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"add"))
                {
                    v[0]= ADD_WB_INSTRUCTION;
                    v[1]= ADD_WB_CONTROL;
                    v[2]= ADD_WB_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"and"))
                {
                    v[0]= AND_WB_INSTRUCTION;
                    v[1]= AND_WB_CONTROL;
                    v[2]= AND_WB_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"b"))
                {
                    v[0]= B_WB_INSTRUCTION;
                    v[1]= B_WB_CONTROL;
                    v[2]= B_WB_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"bic"))
                {
                    v[0]= BIC_WB_INSTRUCTION;
                    v[1]= BIC_WB_CONTROL;
                    v[2]= BIC_WB_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"bl"))
                {
                    v[0]= BL_WB_INSTRUCTION;
                    v[1]= BL_WB_CONTROL;
                    v[2]= BL_WB_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"cmn"))
                {
                    v[0]= CMN_WB_INSTRUCTION;
                    v[1]= CMN_WB_CONTROL;
                    v[2]= CMN_WB_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"cmp"))
                {
                    v[0]= CMP_WB_INSTRUCTION;
                    v[1]= CMP_WB_CONTROL;
                    v[2]= CMP_WB_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"eor"))
                {
                    v[0]= EOR_WB_INSTRUCTION;
                    v[1]= EOR_WB_CONTROL;
                    v[2]= EOR_WB_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"ldm"))
                {
                    v[0]= LDM_WB_INSTRUCTION;
                    v[1]= LDM_WB_CONTROL;
                    v[2]= LDM_WB_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,4,"ldrb"))
                {
                    v[0]= LDRB_WB_INSTRUCTION;
                    v[1]= LDRB_WB_CONTROL;
                    v[2]= LDRB_WB_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"ldr"))
                {
                    v[0]= LDR_WB_INSTRUCTION;
                    v[1]= LDR_WB_CONTROL;
                    v[2]= LDR_WB_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"mcr"))
                {
                    v[0]= MCR_WB_INSTRUCTION;
                    v[1]= MCR_WB_CONTROL;
                    v[2]= MCR_WB_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"mla"))
                {
                    v[0]= MLA_WB_INSTRUCTION;
                    v[1]= MLA_WB_CONTROL;
                    v[2]= MLA_WB_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"mov"))
                {
                    v[0]= MOV_WB_INSTRUCTION;
                    v[1]= MOV_WB_CONTROL;
                    v[2]= MOV_WB_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"mrc"))
                {
                    v[0]= MRC_WB_INSTRUCTION;
                    v[1]= MRC_WB_CONTROL;
                    v[2]= MRC_WB_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"mul"))
                {
                    v[0]= MUL_WB_INSTRUCTION;
                    v[1]= MUL_WB_CONTROL;
                    v[2]= MUL_WB_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"mvn"))
                {
                    v[0]= MVN_WB_INSTRUCTION;
                    v[1]= MVN_WB_CONTROL;
                    v[2]= MVN_WB_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"orr"))
                {
                    v[0]= ORR_WB_INSTRUCTION;
                    v[1]= ORR_WB_CONTROL;
                    v[2]= ORR_WB_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"rsb"))
                {
                    v[0]= RSB_WB_INSTRUCTION;
                    v[1]= RSB_WB_CONTROL;
                    v[2]= RSB_WB_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"rsc"))
                {
                    v[0]= RSC_WB_INSTRUCTION;
                    v[1]= RSC_WB_CONTROL;
                    v[2]= RSC_WB_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3, "sbc"))
                {
                    v[0]= SBC_WB_INSTRUCTION;
                    v[1]= SBC_WB_CONTROL;
                    v[2]= SBC_WB_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"stm"))
                {
                    v[0]= STM_WB_INSTRUCTION;
                    v[1]= STM_WB_CONTROL;
                    v[2]= STM_WB_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,4,"strb"))
                {
                    v[0]= STRB_WB_INSTRUCTION;
                    v[1]= STRB_WB_CONTROL;
                    v[2]= STRB_WB_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"str"))
                {
                    v[0]= STR_WB_INSTRUCTION;
                    v[1]= STR_WB_CONTROL;
                    v[2]= STR_WB_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"sub"))
                {
                    v[0]= SUB_WB_INSTRUCTION;
                    v[1]= SUB_WB_CONTROL;
                    v[2]= SUB_WB_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"swi"))
                {
                    v[0]= SWI_WB_INSTRUCTION;
                    v[1]= SWI_WB_CONTROL;
                    v[2]= SWI_WB_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,4,"swpb"))
                {
                    v[0]= SWPB_WB_INSTRUCTION;
                    v[1]= SWPB_WB_CONTROL;
                    v[2]= SWPB_WB_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"swp"))
                {
                    v[0]= SWP_WB_INSTRUCTION;
                    v[1]= SWP_WB_CONTROL;
                    v[2]= SWP_WB_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"teq"))
                {
                    v[0]= TEQ_WB_INSTRUCTION;
                    v[1]= TEQ_WB_CONTROL;
                    v[2]= TEQ_WB_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"tst"))
                {
                    v[0]= TST_WB_INSTRUCTION;
                    v[1]= TST_WB_CONTROL;
                    v[2]= TST_WB_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,4,"bkpt"))
                {
                    v[0]= BKPT_WB_INSTRUCTION;
                    v[1]= BKPT_WB_CONTROL;
                    v[2]= BKPT_WB_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"blx"))
                {
                    v[0]= BLX_WB_INSTRUCTION;
                    v[1]= BLX_WB_CONTROL;
                    v[2]= BLX_WB_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,2,"bx"))
                {
                    v[0]= BX_WB_INSTRUCTION;
                    v[1]= BX_WB_CONTROL;
                    v[2]= BX_WB_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"clz"))
                {
                    v[0]= CLZ_WB_INSTRUCTION;
                    v[1]= CLZ_WB_CONTROL;
                    v[2]= CLZ_WB_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"pld"))
                {
                    v[0]= PLD_WB_INSTRUCTION;
                    v[1]= PLD_WB_CONTROL;
                    v[2]= PLD_WB_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,4,"qadd"))
                {
                    v[0]= QADD_WB_INSTRUCTION;
                    v[1]= QADD_WB_CONTROL;
                    v[2]= QADD_WB_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,4,"qsub"))
                {
                    v[0]= QSUB_WB_INSTRUCTION;
                    v[1]= QSUB_WB_CONTROL;
                    v[2]= QSUB_WB_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,5,"qdadd"))
                {
                    v[0]= QDADD_WB_INSTRUCTION;
                    v[1]= QDADD_WB_CONTROL;
                    v[2]= QDADD_WB_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,5,"qdsub"))
                {
                    v[0]= QDSUB_WB_INSTRUCTION;
                    v[1]= QDSUB_WB_CONTROL;
                    v[2]= QDSUB_WB_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,6,"smlaxy"))
                {
                    v[0]= SMLAXY_WB_INSTRUCTION;
                    v[1]= SMLAXY_WB_CONTROL;
                    v[2]= SMLAXY_WB_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,7,"smlalxy"))
                {
                    v[0]= SMLALXY_WB_INSTRUCTION;
                    v[1]= SMLALXY_WB_CONTROL;
                    v[2]= SMLALXY_WB_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,6,"smulxy"))
                {
                    v[0]= SMULXY_WB_INSTRUCTION;
                    v[1]= SMULXY_WB_CONTROL;
                    v[2]= SMULXY_WB_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,6,"smlawy"))
                {
                    v[0]= SMLAWY_WB_INSTRUCTION;
                    v[1]= SMLAWY_WB_CONTROL;
                    v[2]= SMLAWY_WB_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,6,"smulwy"))
                {
                    v[0]= SMULWY_WB_INSTRUCTION;
                    v[1]= SMULWY_WB_CONTROL;
                    v[2]= SMULWY_WB_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,5,"smlal"))
                {
                    v[0]= SMLAL_WB_INSTRUCTION;
                    v[1]= SMLAL_WB_CONTROL;
                    v[2]= SMLAL_WB_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,5,"smull"))
                {
                    v[0]= SMULL_WB_INSTRUCTION;
                    v[1]= SMULL_WB_CONTROL;
                    v[2]= SMULL_WB_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,5,"umlal"))
                {
                    v[0]= UMLAL_WB_INSTRUCTION;
                    v[1]= UMLAL_WB_CONTROL;
                    v[2]= UMLAL_WB_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,5,"umull"))
                {
                    v[0]= UMULL_WB_INSTRUCTION;
                    v[1]= UMULL_WB_CONTROL;
                    v[2]= UMULL_WB_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,3,"dmb"))
                {
                    v[0]= DMB_WB_INSTRUCTION;
                    v[1]= DMB_WB_CONTROL;
                    v[2]= DMB_WB_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,6,"uopReg"))
                {
                    v[0]= UOPREG_WB_INSTRUCTION;
                    v[1]= UOPREG_WB_CONTROL;
                    v[2]= UOPREG_WB_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,4,"vmrs"))
                {
                    v[0]= VMRS_WB_INSTRUCTION;
                    v[1]= VMRS_WB_CONTROL;
                    v[2]= VMRS_WB_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else if  (!instruction->staticInst->getName().compare(0,4,"vmsr"))
                {
                    v[0]= VMSR_WB_INSTRUCTION;
                    v[1]= VMSR_WB_CONTROL;
                    v[2]= VMSR_WB_DATA;
                    return (v[0]+v[1]+v[2]);
                }
                else
                {
                    v[0]= 0;
                    v[1]= 0;
                    v[2]= 0;
                    return 0;
                }
            }
            return 0;
        }
    };
 public:
    /*Instances*/
    pipelineRegisterVulnerability** prVul;
    //Container constructor
    vulnerabilityContainer(BaseCPU *_cpu)
    {
        //Here initialize each component instance.
        int i;
        cpu = _cpu;
        vulComp.totalVulnerability_PR=0;
        prVul = new pipelineRegisterVulnerability*[numPR];
        for (i= 0; i<numPR;i++)
        {
            prVul[i] = new pipelineRegisterVulnerability(0, false, 
                    Dynamic, PR_BASE_ID+i);
            prVul[i]->startTrackingVulnerability(curTick());
        }    
    }
    void regStats()
    {
        using namespace Stats;
        TotalPRVulnerability
            .name(cpu->name() + ".TotalPRVulnerability")
            .desc("Vulnerable bits at Pipeline registers")
            ;
        prFetch_TotalVulbits
            .name(cpu->name() + ".prFetch_TotalVulbits")
            .desc("Vulnerable bits at PC to IF/ID pipeline register.")
            ;
        prDecode_TotalVulbits
            .name(cpu->name() + ".prDecode_TotalVulbits")
            .desc("Vulnerable bits at IF/ID to ID/Rename pipeline registers.")
            ;
        prRename_TotalVulbits
            .name(cpu->name() + ".prRename_TotalVulbits")
            .desc("Vulnerable bits at ID/Rename to Rename/IEW pipeline registers.")
            ;
        prIEW_TotalVulbits
            .name(cpu->name() + ".prIEW_TotalVulbits")
            .desc("Vulnerable bits at Rename/IEW to IEW/Commit pipeline registers.")
            ;
        prCommit_TotalVulbits
            .name(cpu->name() + ".prCommit_TotalVulbits")
            .desc("Vulnerable bits at IEW/Commit to release.")
            ;
        prFetch_InstVulbits
            .name(cpu->name() + ".prFetch_InstVulbits")
            .desc("Instruction vulnerability bits at Fetch Stage")
            ;
        prFetch_CtrlVulbits
            .name(cpu->name() + ".prFetch_CtrlVulbits")
            .desc("Control vulnerability bits at Fetch Stage")
            ;
        prFetch_DataVulbits
            .name(cpu->name() + ".prFetch_DataVulbits")
            .desc("Data vulnerability bits at Fetch Stage")
            ;
        prDecode_InstVulbits
            .name(cpu->name() + ".prDecode_InstVulbits")
            .desc("Instruction vulnerability bits at Decode Stage")
            ;
        prDecode_CtrlVulbits
            .name(cpu->name() + ".prDecode_CtrlVulbits")
            .desc("Control vulnerability bits at Decode Stage")
            ;
        prDecode_DataVulbits
            .name(cpu->name() + ".prDecode_DataVulbits")
            .desc("Data vulnerability bits at Decode Stage")
            ;
        prRename_InstVulbits
            .name(cpu->name() + ".prRename_InstVulbits")
            .desc("Instruction vulnerability bits at Rename Stage")
            ;
        prRename_CtrlVulbits
            .name(cpu->name() + ".prRename_CtrlVulbits")
            .desc("Control vulnerability bits at Rename Stage")
            ;
        prRename_DataVulbits
            .name(cpu->name() + ".prRename_DataVulbits")
            .desc("Data vulnerability bits at Rename Stage")
            ;
        prIEW_InstVulbits
            .name(cpu->name() + ".prIEW_InstVulbits")
            .desc("Instruction vulnerability bits at IEW Stage")
            ;
        prIEW_CtrlVulbits
            .name(cpu->name() + ".prIEW_CtrlVulbits")
            .desc("Control vulnerability bits at IEW Stage")
            ;
        prIEW_DataVulbits
            .name(cpu->name() + ".prIEW_DataVulbits")
            .desc("Data vulnerability bits at IEW Stage")
            ;
        prCommit_InstVulbits
            .name(cpu->name() + ".prCommit_InstVulbits")
            .desc("Instruction vulnerability bits at Commit Stage")
            ;
        prCommit_CtrlVulbits
            .name(cpu->name() + ".prCommit_CtrlVulbits")
            .desc("Control vulnerability bits at Commit Stage")
            ;
        prCommit_DataVulbits
            .name(cpu->name() + ".prCommit_DataVulbits")
            .desc("Data vulnerability bits at Commit Stage")
            ;
    }
    //Register an Access to component defined in the vulnerability container.
    bool registerVulComponentAccess(DynInstPtr instruction, vulParams *vp)
    {
        //Pipeline Register
        if(vp->compID==PR_BASE_ID)
        {
            unsigned int map = vp->Stage==STAGE_FETCH?        Fetch_stage:
                               vp->Stage==STAGE_DECODE?      Decode_stage:
                               vp->Stage==STAGE_DECODE_PLUS? Rename_stage:    
                               ((vp->Stage==STAGE_MEM)||(vp->Stage==STAGE_EXECUTE))?
                                                                IEW_stage:
                                                             Commit_stage;
            if(vp->WriteRead)
            {                                           
               prVul[map+vp->type]->writePR(instruction, vp->Stage,vp->type);
               DPRINTF(vulRTL,"WRITE [op:%s][pr:%d][type:%d] Vulbits=%llu\n\r",
                        instruction->staticInst->getName(),map,vp->type,
                        prVul[map+vp->type]->v[vp->type]);
               return 1;
            }
            else
            {
                prVul[map+vp->type]->readPR(instruction, vp->Stage,vp->type);
                DPRINTF(vulRTL,"READ [op:%s][pr:%d][type:%d] Vulbits=%llu\n\r",
                        instruction->staticInst->getName(),map,vp->type,
                        prVul[map+vp->type]->v[vp->type]);
                return 1;
            }
        }
        else
        {
         //unknown ID, component not defined in container.
         return 0;
        }
    }
    //Here we execute a removeAccess for an specific component.
    bool removeVulComponentTracker(vulParams *vp )
    {
       uint32_t i;
       //Pipeline Register
       if(vp->compID==PR_BASE_ID)
       {
           for (i=0;i<numPR;i++)
           {
               prVul[i]->RemoveAccess(vp->seqNum,vp->CommitSquash);
           }
           return 1;
       } 
       else
       {
           //unknown component
           return 0;  
       }
    }
    bool updateComponentTotalVulnerability(vulParams *vp)
    {
        unsigned int i;
        //Pipeline Register
       if(vp->compID==PR_BASE_ID)
       {
           uint64_t vulcompTotal[numPR];
           for (i=0;i<numPR;i=i+3)
           {
               //Instruction bits
               vulcompTotal[i] = prVul[i]->getCurrentVulnerability();
               //Control bits
               vulcompTotal[i+1] = prVul[i+1]->getCurrentVulnerability();
               //Data bits
               vulcompTotal[i+2] = prVul[i+2]->getCurrentVulnerability();
           }    
           /** Vulnerability bits per stage per type*/
           prFetch_InstVulbits= vulcompTotal[0];
           prFetch_CtrlVulbits= vulcompTotal[1];
           prFetch_DataVulbits= vulcompTotal[2];
           prDecode_InstVulbits= vulcompTotal[3];
           prDecode_CtrlVulbits= vulcompTotal[4];
           prDecode_DataVulbits= vulcompTotal[5];
           prRename_InstVulbits= vulcompTotal[6];
           prRename_CtrlVulbits= vulcompTotal[7];
           prRename_DataVulbits= vulcompTotal[8];
           prIEW_InstVulbits= vulcompTotal[9];
           prIEW_CtrlVulbits= vulcompTotal[10];
           prIEW_DataVulbits= vulcompTotal[11];
           prCommit_InstVulbits= vulcompTotal[12];
           prCommit_CtrlVulbits= vulcompTotal[13];
           prCommit_DataVulbits= vulcompTotal[14];
           /*Total vulnerabilities per stage*/
           prFetch_TotalVulbits= (vulcompTotal[0]+vulcompTotal[1]+vulcompTotal[2]);
           prDecode_TotalVulbits= (vulcompTotal[3]+vulcompTotal[4]+vulcompTotal[5]);
           prRename_TotalVulbits= (vulcompTotal[6]+vulcompTotal[7]+vulcompTotal[8]);
           prIEW_TotalVulbits= (vulcompTotal[9]+vulcompTotal[10]+vulcompTotal[11]);
           prCommit_TotalVulbits=(vulcompTotal[12]+vulcompTotal[13]+vulcompTotal[14]);
          
           vulComp.totalVulnerability_PR = (vulcompTotal[0]+vulcompTotal[1]+vulcompTotal[2]+
                                            vulcompTotal[3]+vulcompTotal[4]+vulcompTotal[5]+
                                            vulcompTotal[6]+vulcompTotal[7]+vulcompTotal[8]+
                                            vulcompTotal[9]+vulcompTotal[10]+vulcompTotal[11]+
                                            vulcompTotal[12]+vulcompTotal[13]+vulcompTotal[14]);
           TotalPRVulnerability         =  (vulcompTotal[0]+vulcompTotal[1]+vulcompTotal[2]+
                                            vulcompTotal[3]+vulcompTotal[4]+vulcompTotal[5]+
                                            vulcompTotal[6]+vulcompTotal[7]+vulcompTotal[8]+
                                            vulcompTotal[9]+vulcompTotal[10]+vulcompTotal[11]+
                                            vulcompTotal[12]+vulcompTotal[13]+vulcompTotal[14]);
           
         return 1;
       } 
       else
       {
           //unknown component
           return 0;
       
       }
    }
};

#endif	/* PIPELINEREGISTERVULNERABILITY_HH */

