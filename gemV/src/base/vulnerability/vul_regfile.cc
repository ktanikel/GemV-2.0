/*
 * Copyright (c) 20014-15 Arizona State University
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met: redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer;
 * redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution;
 * neither the name of the copyright holders nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Srinivas Tanikella
 *
 *	    Compiler and Microarchitecture Lab, ASU
 * 	    http://aviral.lab.asu.edu
 */

#include "base/vulnerability/vul_regfile.hh"

RegVulCalc::RegVulCalc(int numInts, int numFloats)
{
    numIntRegs = numInts;
    numFloatRegs = numFloats;
    numRegs = numIntRegs + numFloatRegs;
     
    for(unsigned i = 0; i < numRegs; ++i) {
        History h;
        histories.push_back(h);
    }

}

RegVulCalc::~RegVulCalc()
{

}

long
RegVulCalc::vulOnRead(int idx, bool isInt)
{
    long vul = 0;
    int reg_size = isInt ? INT_REG_SIZE : FLOAT_REG_SIZE;
    
    assert(idx < numRegs);
    
    vul += (curTick() - histories[idx].t) * reg_size;
    histories[idx].op = READ;
    histories[idx].t = curTick();

    return vul/TICKS_PER_CYCLE;

}

void 
RegVulCalc::vulOnWrite(int idx, bool isInt)
{
    assert(idx < numRegs);

    histories[idx].op = WRITE;
    histories[idx].incomingTick = curTick();
    histories[idx].t = curTick();
}
