/*
 * Copyright (c) 20014-15 Arizona State University
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met: redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer;
 * redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution;
 * neither the name of the copyright holders nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Srinivas Tanikella
 *
 *	    Compiler and Microarchitecture Lab, ASU
 * 	    http://aviral.lab.asu.edu
 */

#include "base/vulnerability/vul_pipeline.hh"

PipeVulTracker::PipeVulTracker()
{
    fetchQ.name = "fetchqueue";
    fetchQ.vul = 0;

    Field f;
    f.size = SEQNUM_WIDTH;
    f.f = P_SEQNUM;
    f.name = "seqnum";

    fetchQ.fields.push_back(f);

}

void
PipeVulTracker::vulOnWrite(PipeStruct s, InstField f, InstSeqNum seqNum)
{
    pStructure *st = selectStruct(s);

    assert(st != NULL);

    std::list<Field>::iterator fit = st->fields.begin();

    while(fit != st->fields.end()) {

        if(fit->f == f)
            break;

        fit++;
    }

    fit->hist[seqNum].op = WRITE;
    fit->hist[seqNum].t = curTick();
    fit->hist[seqNum].incomingTick = curTick();
    fit->writes++;

}

void
PipeVulTracker::vulOnRead(PipeStruct s, InstField f, InstSeqNum seqNum)
{

    pStructure *st = selectStruct(s);

    assert(st != NULL);
    
    std::list<Field>::iterator fit = st->fields.begin();

    while(fit != st->fields.end()) {

        if(fit->f == f)
            break;

        fit++;
    }

    assert(fit->hist[seqNum].t != -1);

    st->vul += fit->size*(curTick() - fit->hist[seqNum].t)/TICKS_PER_CYCLE;

    if(fit->hist[seqNum].op == WRITE || fit->hist[seqNum].op == READ) {
        //DPRINTF(VulTrackerPipe,"Making pair %lu %lu\n", fit->hist.t, curTick());
        fit->vulIntervals.push_back(std::make_pair(fit->hist[seqNum].t, curTick()));
    }

    fit->hist[seqNum].op = READ;
    fit->hist[seqNum].t = curTick();
    fit->reads++;

}

pStructure*
PipeVulTracker::selectStruct(PipeStruct s)
{
    pStructure *st;

    switch(s) {

        case P_FETCHQ:
            st = &fetchQ;
            break;

        default:
            st = NULL;
            break;
    }

    return st;
}

void
PipeVulTracker::regStats()
{
    fetchQ.vul
        .name("vulnerability.fetch_queue")
        .desc("Vulnerability of Fetch Queue in bit-cycles");

}
