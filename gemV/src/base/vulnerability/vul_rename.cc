/*
 * Copyright (c) 20014-15 Arizona State University
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met: redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer;
 * redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution;
 * neither the name of the copyright holders nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Srinivas Tanikella
 *
 *	    Compiler and Microarchitecture Lab, ASU
 * 	    http://aviral.lab.asu.edu
 */

#include "base/vulnerability/vul_rename.hh"

void 
RenameVulCalc::init(int _size_int, int _size_float, int _size_cc)
{
    size = _size_int + _size_float + _size_cc;

    for(unsigned i = 0; i < size; ++i)
        histories.push_back(History());

}

long
RenameVulCalc::vulOnRead(PhysRegIndex phys_reg, int freeRegs)
{
    long vul = 0;

    assert(phys_reg < size);

    vul = curTick() - histories[phys_reg].t;

    histories[phys_reg].t = curTick();

    histories[phys_reg].op = READ;

    return (RENAME_MAP_ENTRY_SIZE)*vul/TICKS_PER_CYCLE;

}

long
RenameVulCalc::vulOnWrite(PhysRegIndex phys_reg, int freeRegs)
{
    assert(phys_reg < size);

    long vul = 0;

    if(histories[phys_reg].incomingTick != -1)
        vul = curTick() - histories[phys_reg].t;

    histories[phys_reg].op = WRITE;

    histories[phys_reg].incomingTick = curTick();
    
    histories[phys_reg].t = histories[phys_reg].incomingTick;

    return (RENAME_MAP_ENTRY_SIZE)*vul/TICKS_PER_CYCLE;
}
