/*
 * Copyright (c) 20014-15 Arizona State University
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met: redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer;
 * redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution;
 * neither the name of the copyright holders nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Abhishek Rhisheekesan
 *
 *	    Compiler and Microarchitecture Lab, ASU
 * 	    http://aviral.lab.asu.edu
 */

/** @file
 * Declaration of Vulnerability Interval objects.
 */

#ifndef __VULNERABILITY_INTERVAL_HH__
#define __VULNERABILITY_INTERVAL_HH__

#include <cassert>

#include "base/types.hh"

class VulnerabilityInterval
{
  public:
    //Variable type of vulnerability interval ID
    typedef unsigned int VulIntervalIDType;

    //Variable type of vulnerability (ticks * bits)
    typedef int64_t VulnerabilityType;

  private:
    VulIntervalIDType vulIntervalID;//ID of vulnerability interval

    Tick startIntervalTick;//start of vulnerability interval (in ticks)
    Tick endIntervalTick;//end of vulnerability interval (in ticks)

    //Number of bits of the unit that are vulnerable for this interval
    unsigned int numBits;

  public:
    //Usual constructor when you have only
    //the start interval to start with
    VulnerabilityInterval(VulIntervalIDType viid,
			  Tick sit, unsigned int nb)
	: vulIntervalID(viid), startIntervalTick(sit), numBits(nb)
    {
      assert(startIntervalTick >= 0 &&
      "Start tick of vulnerability interval is negative");
      //assert(numBits > 0 &&
      //"Number of vulnerability bits is not greater than 0");
      endIntervalTick = -1;
    }

    //Use this constructor only if you already have
    //the start interval tick and end interval tick
    VulnerabilityInterval(VulIntervalIDType viid,
			  Tick sit, Tick eit, unsigned int nb)
	: vulIntervalID(viid), startIntervalTick(sit),
	  endIntervalTick(eit), numBits(nb)
    {
      assert((startIntervalTick >= 0) &&
	     (endIntervalTick >= 0) &&
	     "Either start or end tick of vulnerability interval is negative");
      assert(endIntervalTick >= startIntervalTick &&
	     "Start tick > end tick of vulnerability interval");
      //assert(numBits > 0 &&
      //"Number of vulnerability bits is not greater than 0");
    }

    //Dummy constructor (when you have neither start nor end intervals)
    VulnerabilityInterval(VulIntervalIDType viid, unsigned int nb)
	: vulIntervalID(viid), numBits(nb)
    {
      //assert(numBits > 0 &&
      //"Number of vulnerability bits is not greater than 0");
      startIntervalTick = -1;
      endIntervalTick = -1;
    }

    VulIntervalIDType getVulIntervalID()
    {
      return vulIntervalID;
    }

    Tick getStartIntervalTick()
    {
      return startIntervalTick;
    }

    Tick getEndIntervalTick()
    {
      return endIntervalTick;
    }

    void setStartIntervalTick(Tick sit)
    {
      startIntervalTick = sit;
    }

    void setEndIntervalTick(Tick eit)
    {
      endIntervalTick = eit;
    }

    Tick getVulnerabilityInterval()
    {
      if((endIntervalTick >= 0) && (startIntervalTick >= 0)
	 && (endIntervalTick >= startIntervalTick))
      {
	return (endIntervalTick - startIntervalTick);
      }
      else//indicate error
      {
	return -1;
      }
    }

    unsigned int getNumVulnerableBits()
    {
      return numBits;
    }

    VulnerabilityType getVulnerability()
    {
      int vulnerability;
      vulnerability = numBits * getVulnerabilityInterval();
      assert(vulnerability >= 0 && "Vulnerability of interval is negative");
      return vulnerability;
    }

};

struct VulnerabilityAccumulator
{
    typedef VulnerabilityInterval::VulnerabilityType VulnerabilityType;
    VulnerabilityType operator() (VulnerabilityType result,
				  VulnerabilityInterval& vi)
    {
        return result + vi.getVulnerability();
    }
};

#endif // __VULNERABILITY_INTERVAL_HH__
