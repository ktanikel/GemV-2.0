/*
 * Copyright (c) 20014-15 Arizona State University
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met: redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer;
 * redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution;
 * neither the name of the copyright holders nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Abhishek Rhisheekesan
 *
 *	    Compiler and Microarchitecture Lab, ASU
 * 	    http://aviral.lab.asu.edu
 */

/** @file
 * Declaration of Access Tracker objects.
 */

#ifndef __ACCESS_TRACKER_HH__
#define __ACCESS_TRACKER_HH__

#include <cassert>

#include "base/types.hh"

class AccessTracker
{
  public:
    typedef unsigned int AccessModeType;//Variable type of access mode (read or write)

    //enums for access mode - usually read or write
    enum
    {
      READ,
      WRITE,
      DUMMYMAX
    };

    typedef uint64_t AccessIDType;//Variable type of access ID

  private:
    AccessIDType accessID;//ID of the access

    AccessModeType accessMode;//Mode of access (usually read or write)

    //Number of bits accessed
    //Currently make this equal to the number of vulnerable bits
    //FIXME Disassociate number of bits accessed and vulnerable bits
    unsigned int numBits;

    Tick accessTick;//time of access (in ticks)

  public:
    AccessTracker(AccessIDType aid, AccessModeType am,
		  unsigned int nb,  Tick at)
	: accessID(aid), accessMode(am), numBits(nb), accessTick(at)
    {
      assert((accessMode >= 0) && (accessMode < DUMMYMAX) &&
		 "Access mode is neither READ nor WRITE");
      //assert(numBits > 0 && "Number of bits accessed is not greater than 0");
      assert(accessTick >= 0 && "Tick of access is negative");
    }

    AccessIDType getAccessID()
    {
      return accessID;
    }

    AccessModeType getAccessMode()
    {
      return accessMode;
    }

    unsigned int getNumBits()
    {
      return numBits;
    }

    Tick getAccessTick()
    {
      return accessTick;
    }
};

#endif // __ACCESS_TRACKER_HH__
